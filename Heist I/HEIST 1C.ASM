**********************************
* CHARACTER GENERATOR ROUTINE TO 
* OUTPUT VARIABLE SIZED CHARACTERS
* TO THE SCREEN.  IT USES A SCREEN
* LOOKUP TABLE(LOOKUPLO,LOOKUPHI)
* AND A CHARACTER LOOKUP TABLE 
* (TABLE1,TABLE2).  PARAMETERS ARE
* PASSED THROUGH THE VARIABLES 
* XLOC,YLOC AND SHAPE.  FOUR ZERO
* PAGE LOCATIONS ARE USED FOR 
* POINTERS WITH THE INDIRECT 
* ADDRESSING MODE.  XVAL AND YVAL
* ARE USED AS LOOP VARIABLES AS
* WELL AS HOLDING THE CURRENT 
* X,Y LOCATIONS OF THE BYTE TO BE
* PLACED ON THE SCREEN.  XDIM AND
* YDIM ARE LOADED AT THE BEGINNING
* OF THE ROUTINE TO HOLD THE
* DIMENSIONS OF THE CHARACTER TO
* BE OUTPUTED TO THE SCREEN.
*********************************
*
CHARACTERGEN LDA SHAPE
 CLC
 ROL A ;MULTIPLY SHAPE BY 2 AND
 TAX  ;MOVE TO X REG,SHIFT BIT 7 INTO THE CARRY
 BCS SET2 ;FLAG TO BRANCH IF THE CHAR IS IN THE UPPER HALF OR THE SET
 LDA TABLE1,X 
 STA LOADDR ;TRANSFER TABLE 
 LDA TABLE1+1,X ; POINTERS TO
 STA HIADDR ;ZERO PAGE
 JMP CHAROUT ;DONT FALL INTO SET2 ROUTINE
*
*
SET2 LDA TABLE2,X
 STA LOADDR ;TRANSFER TABLE
 LDA TABLE2+1,X ;POINTERS TO
 STA HIADDR ;ZERO PAGE
*
*FALL INTO CHAROUT
*
CHAROUT LDY #$00 ;DONT WANT AN OFFSET
 LDA (LOADDR),Y  
 STA XDIM ;SET UP DIMENSIONS
 INY ;OF THE 
 LDA (LOADDR),Y ;CHARACTERS
 STA YDIM
 LDA LOADDR ;SET ZERO
 CLC ;PAGE POINTERS
 ADC #$02 ;TO POINT AT
 STA LOADDR ;CHARACTER DATA
 BCC NOCARRY3 ;INSTEAD OF CHAR
 INC HIADDR ;DIMENSIONS
NOCARRY3 LDA YLOC
 STA YVAL ;SET LOOP 
YLOOP LDA XLOC ;VARIABLES
 STA XVAL
XLOOP LDA XVAL ;IF XVAL IS OUT 
 CMP #$22 ;OF BOUNDS 
 BCS NOPLOT ;DONT PLOT 
 CMP LEFTBOUND ;IS HE OFF THE LEFT
 BCC NOPLOT ;SIDE OF THE SREEN?
 LDX YVAL ;-CHECK FIRST HOPLOT AREA
 CPX YBOUND3 ;-IF NOT IN THIS
 BCC YESPLOT ; AREA THEN PLOT IT
 CPX YBOUND4
 BCS YESPLOT
 JMP NOPLOT ;-OTHERWISE DON'T PLOT IT
YESPLOT LDX YVAL ;-CHECK SECOND NO PLOT AREA
 CPX YBOUND ;-IF NOT IN THIS
 BCC YESPLOT1 ; AREA THEN PLOT IT
 CPX YBOUND2
 BCS YESPLOT1
 JMP NOPLOT ;OTHERWISE DON'T PLOT
YESPLOT1 LDA LOOKUPHI,X ;INDEX LOOKUP 
 STA SCREENHI ;TABLES AND
 LDA LOOKUPLO,X ;TRANSFER
 CLC  ;TO ZERO PAGE AND
 ADC XVAL ;ADD IN OFFSET
 STA SCREENLO
 BCC NOCARRY2 ;CARRY FROM ADD?
 INC SCREENHI
NOCARRY2 LDY #$00 ;ZERO INDEX
 LDA (LOADDR),Y ;GET CHARACTER BYTE
 EOR (SCREENLO),Y ;EXCLUSIVE OR IT AND 
 STA (SCREENLO),Y ;PUT IT BACK ON THE SCREEN
NOPLOT INC LOADDR ;SET UP NEXT CHAR. ADDRESS
 BNE NOCARRY4 ;DONT PERFORM A CARRY
 INC HIADDR ;TO HIBYTE 
NOCARRY4 INC XVAL ;ADVANCE SCREEN LOCATION 
 LDA XVAL 
 SEC  ;CHECK FOR 
 SBC XLOC ;RIGHT EDGE
 CMP XDIM ;OF CHARACTER 
 BNE XLOOP ;CONTINUE TO LOOP IF RIGHT EDGE HAS NOT BEEN REACHED
 INC YVAL ;ADVANCE SCREEN LOCATION
 LDA YVAL
 SEC  ;CHECK FOR 
 SBC YLOC ;BOTTOM OF
 CMP YDIM ;CHARACTER
 BNE YLOOP ;CONTINUE TO LOOP IF CHARACTER NOT FINISHED
 RTS
*
*
*****************************************
* ROUTINE TO BLOAD IN APPROPRIATE CHAR. *
* SET TO BE DETERMINED BY THE DECODED   *
* RESULT OF LEVEL# FOR ANY GIVEN LEVEL  *
*****************************************
*
*
CHARACTERBLOAD LDX SCROLLDIRECTION ;SEE IF GOING UP OR DOWN 
 BNE BDOWN ;DOWN DECODE ROUTINE 
BUP LDX LEVEL# ;CURRENT LEVEL 
 DEX  ;DEC TO NEXT LEVEL
 CPX #$03 ;BLOAD CSET4
 BNE BUP1 ;IF NOT TRY ANOTHER VALUE 
 LDA #$B4 ;CSET4
 STA TABLE+$0F ;TABLE# 
 STA CSET+$0A ;CSET# 
 JMP BCHAR ;BLOAD IN TABLE&CSET
BUP1 CPX #$02 ;BLOAD CSET2
 BNE RETURN1 ;IF NOT RETURN 
 LDA #$B2 ;CSET2 
 STA TABLE+$0F ;TABLE# 
 STA CSET+$0A ;CSET# 
 JMP BCHAR ;BLOAD CSET2&TABLE
RETURN1 RTS  ;GO HOME
BDOWN LDX LEVEL# ;CURRENT LEVEL#
 INX ;INC TO NEXT LEVEL
 CPX #$03 ;CSET4 
 BNE BDOWN1 ;IF NOT TRY AGAIN 
 LDA #$B4 ;CSET#
 STA TABLE+$0F ;TABLE# 
 STA CSET+$0A ;CSET# 
 JMP BCHAR ;BLOAD CSET4&TABLE 
BDOWN1 CPX #$04 ;CSET3 
 BNE RETURN1 ;IF NOT RETURN 
 LDA #$B3 ;CSET#3
 STA TABLE+$0F ;TABLE# 
 STA CSET+$0A ;CSET# AND FALL THROUGH 
BCHAR LDX #$00 ;INIT 
BCHARLOOP LDA TABLE,X ;GET CHAR
 JSR DOS ;SEND TO DOS
 INX
 CPX #$11 ;SEE IF DONE
 BNE BCHARLOOP ;IF NOT CONT
 LDX #$00 ;REINIT 
BCHARLOOP1 LDA CSET,X ;GET CHAR
 JSR DOS ;SEND TO DOS
 INX
 CPX #$0C ;SEE IF DONE
 BNE BCHARLOOP1 ;IF NOT CONT
 RTS  ;GO HOME
*
*
PRINTTEXT LDA LEVEL# ;-GET NUMBER OF CURRENT LEVEL  
 BEQ NOPRINTTEXT ;-IF LEVEL IS ZERO THEN DONT PRINT
 BMI NOPRINTTEXT ;-IF LEVEL IS NEGATIVE THEN DONE PRINT 
 ASL A ;-GENERATE INDEX BY MULTIPLYING 
 ASL A ; THE LEVEL# BY 16 AND
 ASL A ; THEN SUBTRACTING 16
 ASL A ; AS THE FIRST LEVEL
 SEC ; IS LEVEL ONE AND
 SBC #$10 ; NOT LEVEL ZERO
 STA LOOP# ;-STORE INDEX
 LDA #$09 ;-SET UP XLOC AND
 STA XLOC ; YLOC FOR THE
 LDA #$5C ; TEXT GENERATOR
 STA YLOC
PRINTTEXTLOOP LDX LOOP# ;-LOAD INDEX
 LDA TEXTTABLE,X ;-GET SHAPE OF
 STA SHAPE ; CHARACTER AND STORE FOR TEXTGEN
 JSR TEXTGEN ;-PUT IT ON THE SCREEN
 INC XLOC ;-MOVE OVER ONE ON SCREEN 
 INC LOOP# ;-ADVANCE TO NEXT CHARACTER 
 LDA XLOC ;-SEE IF DONE 16 
 CMP #$19 ; CHARACTERS YET
 BNE PRINTTEXTLOOP ;-IF NOT KEEP LOOPING 
NOPRINTTEXT RTS ;-ONCE FINISHED, GO HOME
*
*
*****************************************
*ROUTINE TO GENERATE TEXT CHARACTERS ON
*THE HIRES SCREEN USING EXCLUSIVE OR
*****************************************
* 
*
TEXTGEN LDA #$02 ;-SET HIADDR TO $02 
 STA HIADDR
 LDA SHAPE ;-GET SHAPE TO BE GENERATED
 ASL A ;-SHIFT IT LEFT THREE TIMES 
 ASL A ; TO MULTIPLY IT BY EIGHT
 ASL A ; AS THERE ARE EIGHT BYTES TO A CHAR.
 BCC NOINCREASEHI 
 INC HIADDR ;-ADVANCE HI HALF OF ADDRESS
 CLC
NOINCREASEHI ADC #$80 ;-ADD ON $80 (LO HALF OF BASE ADDR) 
 STA LOADDR ;-STORE IN A ZERO PAGE POINTER
 ROL A ;-SHIFT CARRY FLAG INTO BIT 0
 AND #$01 ;-CLEAR ALL OTHER BITS
 CLC
 ADC HIADDR ;-ADD HI HALF OF BASE ADDRESS
 STA HIADDR ;-STORE IN A ZERO PAGE POINTER
 LDA #$08 ;-SET COUNTER FOR EIGHT LOOPS
 STA COUNTER
TEXTGENLOOP LDY YLOC ;-SET UP ZERO PAGE POINTERS
 LDA LOOKUPLO,Y ; FOR LOCATION ON THE
 STA SCREENLO ; SCREEN WHERE IT IS TO
 LDA LOOKUPHI,Y ; BE PLACED
 STA SCREENHI
 LDX #$00 ;-ZERO THE X REG FOR AN INDEX
 LDY XLOC ;-SET HORIZONTAL POINTER TO SCREEN
 LDA (LOADDR,X) ;-GET BYTE OF CHARACTER
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH SCREEN
 STA (SCREENLO),Y ; AND PUT THIS ON THE SCREEN
 INC LOADDR ;-MOVE TO NEXT BYTE OF CHARACTER
 BNE NOINCHIADDR ;-IF IT HAS WRAPPED, FALL
 INC HIADDR ; THROUGH AND INC. THE HI BYTE
NOINCHIADDR INC YLOC ;-MOVE DOWN ONE BYTE
 DEC COUNTER ;-IF EIGHT BYTES HAVE NOT 
 BNE TEXTGENLOOP ; YET BEEN DONE THEN KEEP LOOPING 
 LDA YLOC ;-RESET YLOC TO WHAT IT WAS
 SEC
 SBC #$08
 STA YLOC
 RTS ;-GO HOME
*
*
*****************************************
*ROUTINE TO PUT TREASURES ON THE SCREEN
*AND LABEL WHAT THEY ARE.  IT ALSO SHOWS
*WHAT THE CONTROLS ARE FOR THE GAME.
*FROM THERE IT FALLS INTO THE ACTUAL
*DEMOMAN ROUTINE WHICH "PLAYS" THE GAME.
*****************************************
*
*
DEMO LDX DEMOINDEX ;-GET INDEX INTO DEMO TABLE
 LDA #$00 ;-SET XLOC OF TREASURE
 STA XLOC ; CHAR AND STORE FOR CHARACTERGEN
 CPX #$3B ;-IF GREATER THAN $35 THEN RESET
 BCC NODEMOINDEXRESET ; THE XLOC SO THAT
 LDA #$12 ; CHARACTERS ARE PRINTED ON
 STA XLOC ; THE LEFT OF THE SCREEN
NODEMOINDEXRESET LDA DEMOTABLE,X ;-TRANSFER YLOC
 STA YLOC
 INX ;-ADVANCE POINTERS
 INC DEMOINDEX
 LDA DEMOTABLE,X ;-TRANSFER SHAPE
 STA SHAPE
 JSR CHARACTERGEN ;-PUT TREASURE ON SCREEN
 INC DEMOINDEX ;-ADVANCE INDEX
 LDA XLOC ;-ADD FOUR TO XLOC
 CLC ; TO MOVE PAST TREASURE
 ADC #$04 ; CHARACTER TO WHERE TEXT
 STA XLOC ; SHOULD BE PRINTED
DEMOPRINTLOOP LDX DEMOINDEX ;-RELOAD INDEX
 LDA DEMOTABLE,X ;-GET TEXT SHAPE
 CMP #$8D ;-IS IT A RETURN
 BEQ EXITDEMOPRINTLOOP ;-IF SO THEN EXIT
 STA SHAPE ;-STORE SHAPE FOR TEXTGEN 
 INC XLOC ;-MOVE ONE TO THE RIGHT
 JSR TEXTGEN ;-PUT TEXT CHARACTER ON SCREEN
 INC DEMOINDEX ;-ADVANCE INDEX TO NEXT CHARACTER
 JMP DEMOPRINTLOOP ;-KEEP LOOPING
EXITDEMOPRINTLOOP INC DEMOINDEX ;-ADVANCE POINTER
 LDX DEMOINDEX ;-RELOAD INDEX
 LDA DEMOTABLE,X ;-SEE IF ENTIRE ROUTINE
 CMP #$8D ; HAS BEEN COMPLETED
 BNE DEMO ;-IF NOT THEN KEEP LOOPING
*
*
DISPLAYKEYBOARD LDA #$00 ;-SET UP XLOC
 STA XLOC ; CHARACTER GENERATOR
 LDA #$68 ;-SET UP CHARACTERS YLOC
 STA YLOC ; CHARACTER GENERATOR
 LDA #$9A ;-SHAPE'S NUMBER 
 STA SHAPE ; CHARACTER GENERATOR
 JSR CHARACTERGEN ;-GO AND PUT IT ON THE SCREEN
*
*
 JSR ANYKEYTOSTART ;-PRINTS MESSAGE OF HOW TO START GAME
 JSR STARTMESSAGE ;-GO AND PRINT STARTING MESSAGE
 JSR SETDIM ;-SET UP DIMENSIONS FOR ALL FURTHER DISPLAYS
*
*
REDISPLAY JSR ADISPLAY ;-DISPLAY MESSAGE FOR A KEY
 JSR ZDISPLAY ;-DISPLAY MESSAGE FOR Z KEY
 JSR KDISPLAY ;-DISPLAY MESSAGE FOR K KEY
 JSR LDISPLAY ;-DISPLAY MESSAGE FOR L KEY
 JSR JDISPLAY ;-DISPLAY MESSAGE FOR J KEY
 JSR UDISPLAY ;-DISPLAY MESSAGE FOR U KEY
 JMP REDISPLAY ;-GO DO IT AGAIN
*
*
ANYKEYTOSTART LDA #$00 ;-GET LOCATION OF MESSAGE
 STA TEXTLOC ; IN TABLE
 LDA #$00 ;-CREATE XLOC OF ZERO
 STA XLOC ; AND STORE IN DUMMY VARIABLE
 LDA #$B7 ;-CREATE YLOC ON BOTTOM
 STA YLOC ; AND STORE IN DUMMY VARIABLE
 JSR TEXTOUT ;-GO AND PUT IT ON THE SCREEN
 RTS  ;-RETURN TO MASTER ROUTINE
*
*
ADISPLAY LDA #$2C ;-GET LOCATION OF A MESSAGE
 STA TEXTLOC ; STORE FOR TABLE ADDRESSING
 JSR TEXTOUT ;-GO AND PRINT MESSAGE
 JSR ALPHAANI ;-GO AND ANIMATE THE KEYBOARD
 LDA #$2C ;-RESET INDEX FOR ERASE
 STA TEXTLOC ; AND STORE IT IN A VARIBLE TO BE USED
 JSR TEXTOUT ;-GO AND ERASE START MESSAGE
 RTS  ; AND RETURN TO CONTROL ROUTINE
*
*
ZDISPLAY LDA #$35 ;-GET LOCATION OF A MESSAGE
 STA TEXTLOC ; STORE FOR TABLE ADDRESSING
 JSR TEXTOUT ;-GO AND PRINT MESSAGE
 JSR ZULUANI ;-GO AND ANIMATE THE KEYBOARD
 LDA #$35 ;-RESET INDEX FOR ERASE
 STA TEXTLOC ; AND STORE IT IN A VARIBLE TO BE USED
 JSR TEXTOUT ;-GO AND ERASE START MESSAGE
 RTS  ; AND RETURN TO CONTROL ROUTINE
*
*
LDISPLAY LDA #$4A ;-GET LOCATION OF A MESSAGE
 STA TEXTLOC ; STORE FOR TABLE ADDRESSING
 JSR TEXTOUT ;-GO AND PRINT MESSAGE
 JSR LEEMAANI ;-GO AND ANIMATE THE KEYBOARD
 LDA #$4A ;-RESET INDEX FOR ERASE
 STA TEXTLOC ; AND STORE IT IN A VARIBLE TO BE USED
 JSR TEXTOUT ;-GO AND ERASE START MESSAGE
 RTS  ; AND RETURN TO CONTROL ROUTINE
*
*
KDISPLAY LDA #$40 ;-GET LOCATION OF A MESSAGE
 STA TEXTLOC ; STORE FOR TABLE ADDRESSING
 JSR TEXTOUT ;-GO AND PRINT MESSAGE
 JSR KILOANI ;-GO AND ANIMATE THE KEYBOARD
 LDA #$40 ;-RESET INDEX FOR ERASE
 STA TEXTLOC ; AND STORE IT IN A VARIBLE TO BE USED
 JSR TEXTOUT ;-GO AND ERASE START MESSAGE
 RTS  ; AND RETURN TO CONTROL ROUTINE
*
*
JDISPLAY LDA #$55 ;-GET LOCATION OF A MESSAGE
 STA TEXTLOC ; STORE FOR TABLE ADDRESSING
 JSR TEXTOUT ;-GO AND PRINT MESSAGE
 JSR JULIETANI ;-GO AND ANIMATE THE KEYBOARD
 LDA #$55 ;-RESET INDEX FOR ERASE
 STA TEXTLOC ; AND STORE IT IN A VARIBLE TO BE USED
 JSR TEXTOUT ;-GO AND ERASE START MESSAGE
 RTS  ; AND RETURN TO CONTROL ROUTINE
*
*
UDISPLAY LDA #$66 ;-GET LOCATION OF A MESSAGE
 STA TEXTLOC ; STORE FOR TABLE ADDRESSING
 JSR TEXTOUT ;-GO AND PRINT MESSAGE
 JSR UNIFORMANI ;-GO AND ANIMATE THE KEYBOARD
 LDA #$66 ;-RESET INDEX FOR ERASE
 STA TEXTLOC ; AND STORE IT IN A VARIBLE TO BE USED
 JSR TEXTOUT ;-GO AND ERASE START MESSAGE
 RTS  ; AND RETURN TO CONTROL ROUTINE
*
*
SETDIM LDA #$AE ;-SET YLOC TO SEVERAL LINES ABOVE FIRST MESSAGE 
 STA YLOC ; FOR Y REGISTER
 RTS  ;-RETURN TO CALLER
*
*
STARTMESSAGE LDA #$00 ;-X LOCATION OF MESSAGE
 STA XLOC ; CHARACTER GENERATOR
 LDA #$AE ;-Y LOCATION OF MESSAGE
 STA YLOC ; CHARACTER GENERATOR
 LDA #$1A ;-GET MESSAGE LOCATION
 STA TEXTLOC ;-STORE AT VARIABLE FOR PRINT
 JSR TEXTOUT ; AND GO PRINT IT
 RTS  ;-RETURN TO MASTER ROUTINE
*
*
TEXTOUT LDX TEXTLOC ;-GET LOCATION OF MESSAGE IN TABLE
 LDA TEXTOUTTABLE,X ; AND GET FIRST CHARACTER
 CMP #$8D ;-SEE IF RETURN TO SIGNIFIE END OF MESSAGE
 BNE CARRYONMESSAGE ; IF NOT FINISHED THEN CARRYON
 LDA #$12 ;-RESET XLOC FOR NEXT MESSAGE
 STA XLOC
 RTS  ; IF DONE THEN RETURN TO CALLER
CARRYONMESSAGE STA SHAPE ;-PUT APPROPRIATE NUMBER IN SHAPE 
 JSR TEXTGEN ;-GO PUT THIS SUCKER ON THE SCREEN
 INC TEXTLOC ;-INCREMENT TO NEXT CHARACTER
 INC XLOC ; INCREMENT TO NEXT SPACE
 JMP TEXTOUT ;-GO DO IT AGAIN
*
*
ALPHAANI LDX #$79 ;-FIRST LINE 
ALPHALOOP LDA LOOKUPLO,X ;-GET LOBYTE OF HIRES 
 STA SCREENLO ; AND STORE IT IN POINTER
 LDA LOOKUPHI,X ;-GET HIBYTE OF HIRES
 STA SCREENHI ; STORE IT IN A POINTER
 LDA #$7C ;-FIRST PIECE TO GO ON SCREEN
 LDY #$01 ;-INDEX OF SCREEN LOCATION
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INY  ;-INCREASE TO NEXT POSITION
 LDA #$07 ;-SECOND PIECE TO GO ON SCREEN
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INX  ;-PREINCREMENT TO SEE IF
 CPX #$80 ; FINISHED INVERSE YET
 BNE ALPHALOOP ; AND IF NOT CARRY ON
*
*
 INC KEYCOUNTER ;-SET UP COUNTER TO SEE IF DONE SCHEME
 JSR NOISE ;-MAKE A NOISE FOR ATTENTION
 LDA KEYCOUNTER ;-LETS SEE IF WE ARE DONE ARE INVERSE FLASHING
 CMP #$06 ; IF SO COUNTER WILL BE EVEN
 BNE ALPHAANI ; IF NOT THEN CARRY ON AND FINISH
 LDA #$00 ;-TIME TO RESET COUNTER
 STA KEYCOUNTER ; DO IT
 RTS  ;-AND RETURN TO CALLER 
*
*
ZULUANI LDX #$81 ;-FIRST LINE 
ZULULOOP LDA LOOKUPLO,X ;-GET LOBYTE OF HIRES 
 STA SCREENLO ; AND STORE IT IN POINTER
 LDA LOOKUPHI,X ;-GET HIBYTE OF HIRES
 STA SCREENHI ; STORE IT IN A POINTER
 LDA #$70 ;-FIRST PIECE TO GO ON SCREEN
 LDY #$01 ;-INDEX OF SCREEN LOCATION
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INY  ;-INCREASE TO NEXT POSITION
 LDA #$7F ;-SECOND PIECE TO GO ON SCREEN
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INX  ;-PREINCREMENT TO SEE IF
 CPX #$88 ; FINISHED INVERSE YET
 BNE ZULULOOP ; AND IF NOT CARRY ON
*
*
 INC KEYCOUNTER ;-SET UP COUNTER TO SEE IF DONE SCHEME
 JSR NOISE ;-MAKE A NOISE FOR ATTENTION
 LDA KEYCOUNTER ;-LETS SEE IF WE ARE DONE ARE INVERSE FLASHING
 CMP #$06 ; IF SO COUNTER WILL BE EVEN
 BNE ZULUANI ; IF NOT THEN CARRY ON AND FINISH
 LDA #$00 ;-TIME TO RESET COUNTER
 STA KEYCOUNTER ; DO IT
 RTS  ;-AND RETURN TO CALLER 
*
*
LEEMAANI LDX #$79 ;-FIRST LINE 
LEEMALOOP LDA LOOKUPLO,X ;-GET LOBYTE OF HIRES 
 STA SCREENLO ; AND STORE IT IN POINTER
 LDA LOOKUPHI,X ;-GET HIBYTE OF HIRES
 STA SCREENHI ; STORE IT IN A POINTER
 LDA #$7C ;-FIRST PIECE TO GO ON SCREEN
 LDY #$0A ;-INDEX OF SCREEN LOCATION
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INY  ;-INCREASE TO NEXT POSITION
 LDA #$07 ;-SECOND PIECE TO GO ON SCREEN
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INX  ;-PREINCREMENT TO SEE IF
 CPX #$80 ; FINISHED INVERSE YET
 BNE LEEMALOOP ; AND IF NOT CARRY ON
*
*
 INC KEYCOUNTER ;-SET UP COUNTER TO SEE IF DONE SCHEME
 JSR NOISE ;-MAKE A NOISE FOR ATTENTION
 LDA KEYCOUNTER ;-LETS SEE IF WE ARE DONE ARE INVERSE FLASHING
 CMP #$06 ; IF SO COUNTER WILL BE EVEN
 BNE LEEMAANI ; IF NOT THEN CARRY ON AND FINISH
 LDA #$00 ;-TIME TO RESET COUNTER
 STA KEYCOUNTER ; DO IT
 RTS  ;-AND RETURN TO CALLER 
*
*
KILOANI LDX #$79 ;-FIRST LINE 
KILOLOOP LDA LOOKUPLO,X ;-GET LOBYTE OF HIRES 
 STA SCREENLO ; AND STORE IT IN POINTER
 LDA LOOKUPHI,X ;-GET HIBYTE OF HIRES
 STA SCREENHI ; STORE IT IN A POINTER
 LDA #$7E ;-FIRST PIECE TO GO ON SCREEN
 LDY #$09 ;-INDEX OF SCREEN LOCATION
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INY  ;-INCREASE TO NEXT POSITION
 LDA #$03 ;-SECOND PIECE TO GO ON SCREEN
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INX  ;-PREINCREMENT TO SEE IF
 CPX #$80 ; FINISHED INVERSE YET
 BNE KILOLOOP ; AND IF NOT CARRY ON
*
*
 INC KEYCOUNTER ;-SET UP COUNTER TO SEE IF DONE SCHEME
 JSR NOISE ;-MAKE A NOISE FOR ATTENTION
 LDA KEYCOUNTER ;-LETS SEE IF WE ARE DONE ARE INVERSE FLASHING
 CMP #$06 ; IF SO COUNTER WILL BE EVEN
 BNE KILOANI ; IF NOT THEN CARRY ON AND FINISH
 LDA #$00 ;-TIME TO RESET COUNTER
 STA KEYCOUNTER ; DO IT
 RTS  ;-AND RETURN TO CALLER 
*
*
JULIETANI LDX #$79 ;-FIRST LINE 
JULIETLOOP LDA LOOKUPLO,X ;-GET LOBYTE OF HIRES 
 STA SCREENLO ; AND STORE IT IN POINTER
 LDA LOOKUPHI,X ;-GET HIBYTE OF HIRES
 STA SCREENHI ; STORE IT IN A POINTER
 LDA #$7F ;-FIRST PIECE TO GO ON SCREEN
 LDY #$08 ;-INDEX OF SCREEN LOCATION
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INY  ;-INCREASE TO NEXT POSITION
 LDA #$01 ;-SECOND PIECE TO GO ON SCREEN
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INX  ;-PREINCREMENT TO SEE IF
 CPX #$80 ; FINISHED INVERSE YET
 BNE JULIETLOOP ; AND IF NOT CARRY ON
*
*
 INC KEYCOUNTER ;-SET UP COUNTER TO SEE IF DONE SCHEME
 JSR NOISE ;-MAKE A NOISE FOR ATTENTION
 LDA KEYCOUNTER ;-LETS SEE IF WE ARE DONE ARE INVERSE FLASHING
 CMP #$06 ; IF SO COUNTER WILL BE EVEN
 BNE JULIETANI ; IF NOT THEN CARRY ON AND FINISH
 LDA #$00 ;-TIME TO RESET COUNTER
 STA KEYCOUNTER ; DO IT
 RTS  ;-AND RETURN TO CALLER 
*
*
UNIFORMANI LDX #$71 ;-FIRST LINE 
UNIFORMLOOP LDA LOOKUPLO,X ;-GET LOBYTE OF HIRES 
 STA SCREENLO ; AND STORE IT IN POINTER
 LDA LOOKUPHI,X ;-GET HIBYTE OF HIRES
 STA SCREENHI ; STORE IT IN A POINTER
 LDA #$70 ;-FIRST PIECE TO GO ON SCREEN
 LDY #$07 ;-INDEX OF SCREEN LOCATION
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INY  ;-INCREASE TO NEXT POSITION
 LDA #$1F ;-SECOND PIECE TO GO ON SCREEN
 EOR (SCREENLO),Y ;-EXCLUSIVE OR WITH LOCATION TO PRODUCE
 STA (SCREENLO),Y ; INVERSE EFFECT
 INX  ;-PREINCREMENT TO SEE IF
 CPX #$78 ; FINISHED INVERSE YET
 BNE UNIFORMLOOP ; AND IF NOT CARRY ON
*
*
 INC KEYCOUNTER ;-SET UP COUNTER TO SEE IF DONE SCHEME
 JSR NOISE ;-MAKE A NOISE FOR ATTENTION
 LDA KEYCOUNTER ;-LETS SEE IF WE ARE DONE ARE INVERSE FLASHING
 CMP #$06 ; IF SO COUNTER WILL BE EVEN
 BNE UNIFORMANI ; IF NOT THEN CARRY ON AND FINISH
 LDA #$00 ;-TIME TO RESET COUNTER
 STA KEYCOUNTER ; DO IT
 RTS  ;-AND RETURN TO CALLER 
*
*
NOISE JSR BEEP ;-MAKE A BEEP
 LDA #$FF ;-GENERATE A SMALL PAUSE
 JSR PAUSE ; AND WAIT
 LDA #$FF ;-GENERATE A SMALL PAUSE
 JSR PAUSE ; AND WAIT
 LDA #$FF ;-GENERATE A SMALL PAUSE
 JSR PAUSE ; AND WAIT
 LDA $C000 ;-SEE IF KEYBOARD HAS BEEN PRESSED
 STA $C010 ;-CLEAR STROBE
 BMI MASTERRET ;-IF KEY HAS BEEN PRESSED THEN GO HOME
 RTS  ;-GO BACK TO CALLER
*
*
MASTERRET PLA ;-PULL THE STACK TO RETURN ADDRESS BACK ONE
 PLA ; AND A SECOND TIME TO COMPENSATE FOR FIRST ADDRESS
 PLA ;-DO THE SAME THING OVER TO COMPENSATE FOR SECOND ADDRESS
 PLA
 PLA
 PLA
 RTS ; AND RETURN
*
*
TEXTLOC DFB $00
KEYCOUNTER DFB $00
*
*
 CHN HEIST-Ivariables
----------------------------------

Textfile HEIST-Ic
