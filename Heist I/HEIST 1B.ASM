*****************************************
* ROUTINE TO DECODE THE APPROPRIATE 
* ROUTINES WHICH CAN BE USED AT THE
* THIEFS PRESENT POINT.  TO DO THIS IT
* CHECKS THE TWO POSSIBILITIES FOR THE 
* LEVEL THE THIEF IS ON BY REFERENCING
* USELOC.  IT ALSO CHECKS TREASURE TO
* DETERMINE WHETHER THE THIEF HAS AQUIRED
* THE TREASURE NECCESSARY FOR ANY
* PARTICULAR USE.
* TABLE OF USELOC VALUES
* 00 EQUALS DO NOTHING
*       01 EQUALS PICK WALL
*       02 EQUALS PICK DOWN
*       03 EQUALS PICK UP
*       04 EQUALS LIGHTMATCH
*       05 EQUALS POUR POISON
*       06 EQUALS GAS MASK
*       07 EQUALS LIFE PRESERVER
*       08 EQUALS THROW SPEAR
*****************************************
USE LDA #$00 ;-SET LASTKEY TO PREVENT
 STA LASTKEY ; ROUTINE BEING CALLED MORE THAN ONCE
 LDA LEVEL# ;-SHIFT LEVEL# TO MULTIPLY
 ASL A ; BY TWO AND USE RESULT
 TAY ; AS AN INDEX TO USELOC
 LDA USELOC,Y ; TO FIND WHAT CAN BE USED
DECODEUSE TAX ;-MAKE SURE HE HAS
 LDA TREASURE,X ; PICKED UP THE TREASURE
 BEQ NOTVALIDTARG ; FOR THE USE
 TXA ;-TRANSFER USE CODE BACK
 BEQ FINISHUSE ;-IF IT IS ZERO THEN NO USE IS POSSIBLE
 CMP #$01 ;-BRANCH TO APPROPRIATE
 BEQ PICKHORZ ; ROUTINE ACCORDING TO
 CMP #$02 ; THE VALUE FROM USELOC
 BEQ DOWNPICK
 CMP #$04
 BEQ MATCHES
 CMP #$05
 BEQ POISON
 CMP #$06
 BEQ GASMASK
 CMP #$07
 BEQ LIFEPRESERVER
 CMP #$08
 BEQ SPEAR
FINISHUSE RTS ;-NOT A VALID VALUE SO EXIT ROUTINE
*
*
NOTVALIDTARG JMP NOTVALID
*
*
PICKHORZ CPY #$04 ;-IS HE ON LEVEL TWO?
 BEQ LEVEL2 ;-IF SO BRANCH
 LDA THIEFX ;-HE MUST BE ON LEVEL THREE
 CMP #$03 ; THEN SO SEE IF HE IS IN THE
 BNE NOTVALIDTARG ; RIGHT POSITION
 LDA STOPWALL ;-CHECK IF HE HAS PICKED WALL BEFORE
 BNE NOTVALIDTARG 
 JSR PICKWALL ;-IF HE IS THEN CALL MAIN ROUTINE
 RTS ;-RETURN TO CONTROL ROUTINE
LEVEL2 LDA THIEFX ;-SEE IF HE IS IN
 CMP #$05 ; THE RIGHT
 BNE NOTVALID ; POSITION
 LDA WATERPOURING ;-SEE IF HE HAS ALREADY PICKED IT
 CMP #$01
 BEQ NOTVALID ;-IF HE HAS THEN HE CAN'T PICK IT AGAIN
 JSR PICKWALL ;-IF HE IS THEN CALL MAIN ROUTINE
 RTS ;-RETURN TO CONTROL ROUTINE
DOWNPICK LDA THIEFY ;-MAKE SURE HE IS
 CMP #$56 ; ON THE GROUND
 BNE NOTVALID
 LDA HOLELOC ;-NOT LEGAL UNLESS HE
 CMP #$FE ; HAS NOT YET PICKED DOWN
 BNE NOTVALID
 LDA THIEFX ;-CURRENT X LOC OF MAN 
 SEC  
 SBC #$05 ;-ADJUST FOR LEFT BOUNDRY
 CMP #$17 ;-IS HE IN BOUNDS
 BCS NOTVALID ;-BRANCH IF NOT
 JSR PICKDOWN ;-CALL MAIN ROUTINE
 RTS ; AND RETURN TO CONTROL
*
*
MATCHES LDA THIEFY ;-MAKE SURE HE IS
 CMP #$56 ; ON THE GROUND
 BNE NOTVALID
 JSR LIGHTMATCH ;-CALL MAIN ROUTINE
 RTS ; AND RETURN TO CONTROL
*
*
POISON LDA THIEFY ;-MAKE SURE HE IS
 CMP #$56 ; ON THE GROUND
 BNE NOTVALID
 JSR POURPOISON ;-CALL MAIN ROUTINE
 RTS ; AND RETURN TO CONTROL
*
*
LIFEPRESERVER LDA THIEFY ;-MAKE SURE HE HAS CLIMBED
 CMP #$74 ; PARTWAY DOWN THE LADDER
 BCC NOTVALID
 JMP PRESERVELIFE ;-ENTER NEW SECTION OF CODE
*
*   ; WHICH CONTROLS THE LAST TWO LEVELS
SPEAR LDA THIEFY ;-MAKE SURE HE IS ON THE
 CMP #$56 ; GROUND 
 BNE NOTVALID
 JSR THROWSPEAR ;-THROW THE SPEAR AND 
 RTS ; RETURN TO CONTROL
*
*
GASMASK LDA MASKON ;-BRANCH TO NOTVALID
 BNE NOTVALID ; IF THE MASK IS ALREADY ON
 INC MASKON ;-PUT THE MASK ON
 LDA LASTCTRL ;-SET LAST KEY TO 
 AND #$01 ; ALLOW CHARACTER TO
 CLC ; KEEP RUNNING IN
 ADC #'K' ; THE APPROPRIATE
 STA LASTKEY ; DIRECTION
 JSR ERASETHIEF ;-ERASE THIEF FROM SCREEN
 LDA LASTTHIEFSHAPE ;-CHANGE CHARACTER ON THE
 CLC ; SCREEN TO HAVE GAS MASK
 ADC #$08 ; BY ADDING EIGHT TO THE SHAPE
 STA LASTTHIEFSHAPE ; OF THE CHARACTER
 STA THIEFSHAPE
 JSR ERASETHIEF ;-USE ERASE ROUTINE TO PUT HIM BACK ON SCREEN
 RTS ; RETURN TO CONTROL
*
*
NOTVALID INY ;-ADVANCE POINTER
 TYA ; AND TRY AGAIN
 LSR A ; IF IT IS ODD
 BCS TRYAGAIN
 RTS ;-OTHERWISE RETURN TO CONTROL
TRYAGAIN LDA USELOC,Y ;-GET USE CODE AND
 JMP DECODEUSE ; BRANCH TO DECODE SECTION
*
*
*********************************************
* ROUTINE WHICH ANIMATES THE CHARACTER WHEN
* HE FALLS THROUGH THE HOLE HE PICKS IN THE
* FLOOR.  IT IS CALLED BY THE RUN ROUTINE
* WHEN THE CHARACTER IS DETECTED OVER THE
* HOLE (INDICATED BY HOLELOC).
*********************************************
*
FALL3 LDA #$BE ;-SET CUT OFF FOR LEVEL FOUR WATER
 STA YBOUND2 ;-LOWER BOUND
 LDA #$B0
 STA YBOUND ;-UPPER BOUND
 LDA THIEFX ;-SET SEQUENCE#
 AND #$01 ; TO THE APPROPRIATE
 ASL A ; EVEN/ODD CHARACTER
 CLC  ; FOR THE FALL
 ADC #$31
 STA SEQUENCE#
 DEC THIEFY ;-ADJUST Y LOCATION SO THAT
 DEC THIEFY ; HE HITS THE FLOOR DEAD ON
FALL3LOOP JSR ERASETHIEF ;-ERASE THIEF ALREADY ON SCREEN 
 LDA THIEFY ;-MOVE HIM DOWN FOUR LINES
 CLC
 ADC #$04
 STA THIEFY
 LDA THIEFX ;-TRANSFER X,Y AND SHAPE
 STA LASTTHIEFX ; TO THE CHARACTER
 STA XLOC ; AND TO THE ERASETHIEF
 LDA THIEFY ; ROUTINES
 STA LASTTHIEFY
 STA YLOC
 LDA SEQUENCE#
 STA LASTTHIEFSHAPE
 STA SHAPE
 JSR CHARACTERGEN ;-PUT THE NEW CHARACTER ON THE SCREEN
 JSR ANIMATE ;-DO HAZARD ANIMATION
 LDA THIEFY
 CMP #$94 ;-IS HE ON THE GROUND ON LEVEL 4 
 BNE FALL3LOOP ;-IF NOT KEEP FALLING
 LDA #$01 ;-SET DIRECTION TO
 STA SCROLLDIRECTION ; SCROLL UPWARD
 JSR SCROLL
 LDA #$54 ;-SET ERASE LOCATION WHICH IS
 STA LASTTHIEFY ; DISTURBED BY SCROLL
 LDA #$00 ;-RESET SEQUENCE#
 STA SEQUENCE#
 STA LASTKEY ;-SET IT SO HE DOESNT KEEP RUNNING
 JMP CONTROL 
*
*
*
*
*****************************************
* ROUTINE TO ANIMATE CHARACTER WHEN IN
* PROCESS OF PICKING A HOLE IN EITHER  
* A FLOOR FACING LEFT, ON AN ODD OR EVEN 
* LOCATION OR FACING RIGHT ON AN EVEN OR 
* ODD LOCATION.  ROUTINE ALSO ANIMATES 
* THE MAKING OF A HOLE IN A WALL TO THE
* LEFT ON A ODD LOCATION.  ROUTINE ALSO
* ANIMATES THE MAKING OF A HOLE IN THE
* BOTTOM OF THE BANK.  ROUTINE CALLS 
* DIGDOWN, DIGUP, AND DIGWALL TO ACTUALLY
* UTILIZE DIRECT HIRES MODE TO MAKE HOLES
* IN THE ACTUAL SCREEN
*****************************************
PICKDOWN LDA #$7E ;INITIALIZE HIRES YLOC
 STA LINE# ;TO STARTING LINE
 LDA THIEFX ;CHECK TO SEE IF THIEFX
 LSR A  ;IS EVEN OR ODD 
 BCS DOWNODDTARG ;BRANCH IF SO TO PICK ODD ROUTINE 
*
*
DOWNEVEN LDA CTRLCODE ;TEST CONTROL CODE TO
 LSR A ;SEE IF CARRY SET
 BCS DOWNRIGHTEVEN ;BRANCH IF SO TO DOWN RIGHT EVEN
*
*
DOWNLEFTEVEN LDA #$00 ;INITIALIZE
 STA SEQUENCE# ;GENERAL PURPOSE COUNTER
RESTART LDA #$3D ;SET UP ODD CHARACTER
 STA THIEFSHAPE ;TWO LESS THAN FIRST
DOWNLEFTEVENLOOP JSR ERASETHIEF ;ERASE CURRENT CHARACTER ON SCREEN
 LDA THIEFX ;TRANSFER X 
 STA XLOC ;PARAMETERS
 STA LASTTHIEFX ;TRANSFER TO ERASEPARAMETERS
 LDA THIEFY ;TRANSFER Y
 STA YLOC ;PARAMETERS
 STA LASTTHIEFY ;TRANSFER TO ERASE PARAMETERS
 INC THIEFSHAPE ;INCREMENT TWICE TO 
 INC THIEFSHAPE ;GET RID OF ODD THIEF
 LDA THIEFSHAPE ;CURREN THIEF# 
 STA SHAPE ;STORE AT CHARCTER GENERATOR
 STA LASTTHIEFSHAPE ;AND ERASE ROUTINE
 JSR CHARACTERGEN ;PUT IT ON SCREEN
 JSR ANIMATE ;ALLOW FOR OTHER MOVEMENTS
 LDA THIEFSHAPE ;CHECK TO SEE
 CMP #$43 ;IF FINISHED  
 BNE DOWNLEFTEVENLOOP ;DO IT AGAIN
 JSR DIGDOWN ;HIRES ROUTINE TO DIG HOLE IN LEVEL
 INC SEQUENCE# ;PRE INCREMENTS
 LDA SEQUENCE# ;SEE IF  
 CMP #$04 ;PREINCREMENTS
 BNE RESTART ;DO IT AGAIN IF NOT
 RTS  ;RETURN TO CALLER
*
*
DOWNODDTARG JMP DOWNODD
*
*
DOWNRIGHTEVEN LDA #$00 ;INITIALIZE
 STA SEQUENCE# ;GENERAL PURPOSE COUNTER
RESTART1 LDA #$43 ;SET UP ODD CHARACTER
 STA THIEFSHAPE ;TWO LESS THAN FIRST
DOWNRIGHTEVENLOOP JSR ERASETHIEF ;ERASE CURRENT CHARACTER ON SCREEN
 LDA THIEFX ;TRANSFER X 
 STA XLOC ;PARAMETERS
 STA LASTTHIEFX ;TRANSFER TO ERASEPARAMETERS
 LDA THIEFY ;TRANSFER Y
 STA YLOC ;PARAMETERS
 STA LASTTHIEFY ;TRANSFER TO ERASE PARAMETERS
 INC THIEFSHAPE ;INCREMENT TWICE TO 
 INC THIEFSHAPE ;GET RID OF ODD THIEF
 LDA THIEFSHAPE ;CURREN THIEF# 
 STA SHAPE ;STORE AT CHARCTER GENERATOR
 STA LASTTHIEFSHAPE ;AND ERASE ROUTINE
 JSR CHARACTERGEN ;PUT IT ON SCREEN
 JSR ANIMATE ;ALLOW FOR OTHER MOVEMENTS
 LDA THIEFSHAPE ;CHECK TO SEE
 CMP #$49 ;IF FINISHED  
 BNE DOWNRIGHTEVENLOOP ;DO IT AGAIN
 JSR DIGDOWN ;HIRES ROUTINE TO DIG HOLE IN LEVEL
 INC SEQUENCE# ;PRE INCREMENT
 LDA SEQUENCE# ;SEE IF DONE
 CMP #$04 ;THREE TIMES
 BNE RESTART1 ;IF NOT CONTINUE
 RTS  ;RETURN TO CALLER
*
*
DOWNODD LDA CTRLCODE ;TEST CONTROL CODE TO
 LSR A ;SEE IF CARRY SET
 BCS DOWNRIGHTODD ;BRANCH IF SO TO DOWN RIGHT ODD ROUTINE  
*
*
DOWNLEFTODD LDA #$00 ;INITIALIZE
 STA SEQUENCE# ;GENERAL PURPOSE COUNTER
RESTART2 LDA #$3E ;SET UP ODD CHARACTER
 STA THIEFSHAPE ;TWO LESS THAN FIRST
DOWNLEFTODDLOOP JSR ERASETHIEF ;ERASE CURRENT CHARACTER ON SCREEN
 LDA THIEFX ;TRANSFER X 
 STA XLOC ;PARAMETERS
 STA LASTTHIEFX ;TRANSFER TO ERASEPARAMETERS
 LDA THIEFY ;TRANSFER Y
 STA YLOC ;PARAMETERS
 STA LASTTHIEFY ;TRANSFER TO ERASE PARAMETERS
 INC THIEFSHAPE ;INCREMENT TWICE TO 
 INC THIEFSHAPE ;GET RID OF ODD THIEF
 LDA THIEFSHAPE ;CURREN THIEF# 
 STA SHAPE ;STORE AT CHARCTER GENERATOR
 STA LASTTHIEFSHAPE ;AND ERASE ROUTINE
 JSR CHARACTERGEN ;PUT IT ON SCREEN
 JSR ANIMATE ;ALLOW FOR OTHER MOVEMENTS
 LDA THIEFSHAPE ;CHECK TO SEE
 CMP #$44 ;IF FINISHED  
 BNE DOWNLEFTODDLOOP ;DO IT AGAIN
 JSR DIGDOWN ;HI RES ROUTINE TO DIG HOLE IN LEVEL
 INC SEQUENCE# ;PRE INCREMENT
 LDA SEQUENCE# ;SEE IF DONE
 CMP #$04 ;THREE TIMES YET
 BNE RESTART2 ;IF NOT CONTINUE
 RTS  ;RETURN TO CALLER
*
*
DOWNRIGHTODD LDA #$00 ;INITALIZE
 STA SEQUENCE# ;GENERAL PURPOSE COUNTER
RESTART3 LDA #$44 ;SET UP ODD CHARACTER
 STA THIEFSHAPE ;TWO LESS THAN FIRST
DOWNRIGHTODDLOOP JSR ERASETHIEF ;ERASE CURRENT CHARACTER ON SCREEN
 LDA THIEFX ;TRANSFER X 
 STA XLOC ;PARAMETERS
 STA LASTTHIEFX ;TRANSFER TO ERASEPARAMETERS
 LDA THIEFY ;TRANSFERS
 STA YLOC ;PARAMETERS 
 STA LASTTHIEFY ;TRANSFERS ERASE PARAMETERS
 STA LASTTHIEFY ;TRANSFER TO ERASE PARAMETERS
 INC THIEFSHAPE ;INCREMENT TWICE TO 
 INC THIEFSHAPE ;GET RID OF ODD THIEF
 LDA THIEFSHAPE ;CURREN THIEF# 
 STA SHAPE ;STORE AT CHARCTER GENERATOR
 STA LASTTHIEFSHAPE ;AND ERASE ROUTINE
 JSR CHARACTERGEN ;PUT IT ON SCREEN
 JSR ANIMATE ;ALLOW FOR OTHER MOVEMENTS
 LDA THIEFSHAPE ;CHECK TO SEE
 CMP #$4A ;IF FINISHED  
 BNE DOWNRIGHTODDLOOP ;DO IT AGAIN
 JSR DIGDOWN ;HIRES ROUTINE TO DIG HOLE IN LEVEL
 INC SEQUENCE# ;PRE INCREMENT
 LDA SEQUENCE# ;SEE IF DONE
 CMP #$04 ;THREE TIMES YET
 BNE RESTART3 ;IF NOT CONTINUE
 RTS  ;RETURN TO CALLER
*
*
PICKUPODD RTS ;NO LONGER WRITTEN
*
*
PICKWALL LDA #$00 ;INITIALIZE
 STA SEQUENCE# ;GENERAL PURPOSE COUNTER
 LDA #$5E ;CURRENT LOCATION OF PICK 
 STA LINE# ;SET LINE# FOR HIRES PICKING
RESTART5 LDA #$3B ;SET UP ODD CHARACTER
 STA THIEFSHAPE ;ONE LESS THAN FIRST
PICKWALLLOOP JSR ERASETHIEF ;ERASE CURRENT CHARACTER ON SCREEN
 LDA THIEFX ;TRANSFER X 
 STA XLOC ;PARAMETERS
 STA LASTTHIEFX ;TRANSFER TO ERASEPARAMETERS
 LDA #$4F ;SET Y FOR LARGER CHAR. AND TRANSFER 
 STA YLOC ;PARAMETERS
 STA LASTTHIEFY ;TRANSFER TO ERASE PARAMETERS
 INC THIEFSHAPE ;INCREMENT TO NEXT CHAR. 
 LDA THIEFSHAPE ;CURREN THIEF# 
 STA SHAPE ;STORE AT CHARCTER GENERATOR
 STA LASTTHIEFSHAPE ;AND ERASE ROUTINE
 JSR CHARACTERGEN ;PUT IT ON SCREEN
 JSR ANIMATE ;ALLOW FOR OTHER MOVEMENTS
 LDA THIEFSHAPE ;CHECK TO SEE
 CMP #$3E ;IF FINISHED  
 BNE PICKWALLLOOP ;DO IT AGAIN
 JSR DIGWALL ;HI RES ROUTINE TO DIG HOLE IN WALL OF LEVEL
 INC SEQUENCE# ;PRE INCREMENT
 LDA SEQUENCE# ;SEE IF DONE
 CMP #$04 ;THREE TIMES YET
 BNE RESTART5 ;IF NOT CONTINUE
 LDA LEVEL# ;-IF ON LEVEL TWO THEN 
 CMP #$02 ; SET IT SO THAT THE 
 BNE PICKWALLRETURN ; THE WATER STARTS 
 LDA #$01 ; POURING 
 STA WATERPOURING
 LDA #$97 ;-PUT FIRST POURING 
 STA SHAPE ; CHARACTER ON THE SCREEN 
 LDA #$5E ; SO THE ERASE ROUTINE  
 STA YLOC ; HAS SOMETHING TO ERASE 
 LDA #$05
 STA XLOC
 JSR CHARACTERGEN
PICKWALLRETURN RTS  ;RETURN TO CALLER
*
*
DIGDOWN LDA CTRLCODE ;LETS SEE WHICH   
 LSR A ;WAY HE'S GOING
 BCC DIGDOWNLEFT ;IF NOT SET THEN LEFT
DIGDOWNRIGHT LDA THIEFX ;SET UP
 CLC  ;POSITION FOR
 ADC #$03 ;CHARACTER TO FALL THROUGH
 STA HOLELOC ;FLOOR
 LDX LINE# ;FIND OUT WHAT LINE DOWN TO GET RID OF
 LDA LOOKUPLO,X ;FIRST LOCATION OF 
 STA SCREENLO ;POINTER TO HIRES LINE# 
 LDA LOOKUPHI,X ;OTHER LOCATION TO 
 STA SCREENHI ;POINTER TO HIRES
 LDY THIEFX ;CHARACTER LOCATION
 INY  ;INCREMENT ONCE  
 INY  ;DECREASE ONCE MORE
 INY  ;INCREASE TWO
 LDA #$00 ;BLANK BYTE
 STA (SCREENLO),Y ;STORE IT ON FIRST SEGMENT TO BE HACKED OUT 
 INY  ;INCREMENT TO HACK SEGMENT OVER 2 POSTIONS
 STA (SCREENLO),Y ;HACK OUT SECOND SEGMENT
 INY  ;INCREMENT TO THIRD SEGMENT
 STA (SCREENLO),Y ;HACK OUT THIRD SEGMENT 
 INY  ;INCREMENT 
 STA (SCREENLO),Y ;HACK OUT FOURTH SEGMENT 
 INC LINE# ;INCREMENT TO NEXT LINE DOWN 
 RTS  ;GO HOME 
*
*
DIGDOWNLEFT LDA THIEFX ;CREATE LOCATION
 STA HOLELOC ;FOR CHARACTER TO 
 DEC HOLELOC ;FALL THROUGH
 LDX LINE# ;FIND OUT WHAT LINE DOWN TO GET RID OF
 LDA LOOKUPLO,X ;FIRST LOCATION OF 
 STA SCREENLO ;POINTER TO HIRES LINE# 
 LDA LOOKUPHI,X ;OTHER LOCATION TO 
 STA SCREENHI ;POINTER TO HIRES
 LDY THIEFX ;CHARACTER LOCATION
 DEY  ;DECREASE ONE 
 LDA #$00 ;BLANK BYTE
 STA (SCREENLO),Y ;STORE IT ON FIRST SEGMENT TO BE HACKED OUT 
 INY  ;INCREMENT TO HACK SEGMENT OVER 2 POSTIONS
 STA (SCREENLO),Y ;HACK OUT SECOND SEGMENT
 INY  ;INCREMENT TO THIRD SEGMENT
 STA (SCREENLO),Y ;HACK OUT THIRD SEGMENT 
 INY  ;INCREMENT 
 STA (SCREENLO),Y ;HACK OUT FOURTH SEGMENT 
 INC LINE# ;INCREMENT TO NEXT LINE DOWN 
 RTS  ;GO HOME 
*
*
DIGUP RTS  ;HAS NOT BEEN WRITTEN YET
*
*
DIGWALL LDA #$00 ;INITIALIZE 
 STA COUNTER ;GENERAL PURPOSE COUTNER
 LDA LEVEL# ;FIND OUT WHERE HE IS 
 CMP #$03 ;LEVEL OF SUPPORT COLUMN
 BEQ SUPPORTPICK ;BRANCH TO PICK OUT SUPPORT ROUTINE
WALLPICK LDX LINE# ;FIND OUT WHAT LINE DOWN TO GET RID OF
 LDA LOOKUPLO,X ;FIRST LOCATION OF 
 STA SCREENLO ;POINTER TO HIRES LINE# 
 LDA LOOKUPHI,X ;OTHER LOCATION TO 
 STA SCREENHI ;POINTER TO HIRES
 LDY #$05 ;CHARACTER LOCATION
 LDA #$82 ;BYTE WITH SOME BLUE ON IT
 STA (SCREENLO),Y ;STORE IT ON FIRST SEGMENT TO BE HACKED OUT 
 INC LINE# ;INCREMENT TO NEXT LINE DOWN 
 INC COUNTER ;LET ER GO THREE TIMES
 LDA COUNTER ;CHECK IF DONE THREE TIMES
 CMP #$04 ;USE A FOUR BECAUSE OF PREINCREMENT
 BNE WALLPICK ;IF NOT DONE DO IT AGAIN
 RTS  ;GO HOME 
SUPPORTPICK LDA #$03 ;INITIALIZE SEQUENCE# 
 STA SEQUENCE# ;FOR RETURN UPON TERMINATION OF THIS ROUTINE
 LDA #$52 ;FIRST LINE TO BE DONE
 STA LINE# ;OF HIRES
 LDA #$FE ;MAKE IT POSSIBLE FOR
 STA HOLELOC ;THIEF TO PICK DOWN
 STA STOPWALL ;MAKE SURE IT CAN'T DO IT AGAIN
SUPPORTPICKLOOP LDX LINE# ;FIND OUT WHAT LINE DOWN TO GET RID OF
 LDA LOOKUPLO,X ;FIRST LOCATION OF 
 STA SCREENLO ;POINTER TO HIRES LINE# 
 LDA LOOKUPHI,X ;OTHER LOCATION TO 
 STA SCREENHI ;POINTER TO HIRES
 LDY #$03 ;PLOTTING LOCATION
 LDA #$0F ;WITH WALL SEGMENT 
 ORA (SCREENLO),Y ;OR TO IGNORE FOREIGN OBSTACLES 
 STA (SCREENLO),Y ;STORE IT ON FIRST SEGMENT TO BE HACKED IN 
 INX ;MOVE DOWN TO NEXT LINE
 LDA LOOKUPLO,X ;SET FIRST LOCATION OF 
 STA SCREENLO ;POINTER TO HIRES LINE# 
 LDA LOOKUPHI,X ;OTHER LOCATION TO 
 STA SCREENHI ;POINTER TO HIRES
 LDY #$03 ;PLOTTING LOCATION
 LDA #$0F ;WITH WALL SEGMENT 
 ORA (SCREENLO),Y ;OR TO IGNORE FOREIGN OBSTACLES 
 STA (SCREENLO),Y ;STORE IT ON FIRST SEGMENT TO BE HACKED IN 
 INC LINE# ;INCREMENT TO NEXT LINE DOWN 
 INC LINE#
 LDA #$30 ;DO A PAUSE OF 30 
 JSR PAUSE
 LDA LINE# ;LETS SEE IF AT BOTTOM OF SCREEN
 CMP #$7E ;IF SO THEN
 BNE SUPPORTPICKLOOP ;IF NOT FINISHED THEN CONTINUE 
 LDX #$7D ;INITIALIZE X REGISTER TO FIRST LINE OF WATER 
WATERLOOP LDA LOOKUPLO,X ;POINTERS TO 
 STA SCREENLO ;HIRES SCREENS
 LDA LOOKUPHI,X 
 STA SCREENHI 
 LDY #$00 ;FIRST BYTE ACROSS TO BE DONE
 LDA #$D5 ;BLUE BYTE FOR EVEN LOCATION
 STA (SCREENLO),Y ;PUT IT ON SCREEN
 LDY #$01 ;SECOND BYTE ACROSS TO BE DONE
 LDA #$AA ;BLUE BYTE FOR ODD LOCATION
 STA (SCREENLO),Y ;PUT IT ON SCREEN
 LDY #$02 ;THIRD BYTE ACROSS TO BE DONE
 LDA #$D5 ;BLUE BYTE FOR EVEN LOCATION
 STA (SCREENLO),Y ;PUT IT ON SCREEN
 LDA #$30 ;PAUSE TO GIVE EFFECT OF 
 JSR PAUSE ;RISING WATER
 DEX  ;PRE-DECREMENTS BEFORE CHECKING
 CPX #$41 ;SEE IF ON TOP OF SCREEN
 BNE WATERLOOP ;KEEP ON GOING
 LDA #$03 ;-SET BOUNDARY FOR HOW FAR LEFT THE
 STA LEFTBOUND ;-THIEF CAN RUN
 LDA #$1C ;-SET RIGHTBOUND TO ACCOMODATE 
 STA RIGHTBOUND ; FOR LEFTBOUND
 RTS  ;GO HOME 
* 
*
LIGHTMATCH LDA MATCHX ;-SEE IF A MATCH IS IN THE AIR
 CMP #$80
 BNE NOLIGHTMATCH ;-IF SO THEN DONT LIGHT ANOTHER
 JSR ERASETHIEF ;-ERASE THIEF ALREADY ON SCREEN
 JSR SETLIGHTSHAPE ;-SET SHAPE OF CHARACTER LIGHTING MATCH
 JSR DRAWMATCHTHIEF ;-DRAW THIEF LIGHTING MATCH
 JSR ANIMATE ;-ALLOW ANIMATION OF HAZARDS TO CONTINUE
 JSR ERASETHIEF ;-ERASE LAST THIEF
 INC THIEFSHAPE ;-ADVANCE TO NEXT THIEF SHAPE
 JSR DRAWMATCHTHIEF ;-DRAW SECOND THIEF CHARACTER LIGHTING MATCH
 JSR SETMATCHLOCS ;-SET UP X AND Y LOCS FOR MATCH ANIMATION 
NOLIGHTMATCH RTS
*
*
SETLIGHTSHAPE LDA THIEFX ;-GET XLOC OF THIEF TO TELL
 AND #$01 ; IF HE IS  ON AN EVEN OR ODD LOC
 ASL A ;-MULTIPLY BY TWO TO FORM OFFSET INTO LIGHT
 STA THIEFSHAPE ; CHARACTERS AND STORE IN THIEFSHAPE
 LDA CTRLCODE ;-FIND OUT WHAT DIRECTION HE IS FACING
 AND #$01 ; AND THEN MULTIPLY IT
 ASL A ; BY FOUR 
 ASL A ; AND COMBINE IT WITH
 ORA THIEFSHAPE ; THE LAST NUMBER GENERATED
 CLC ;-THEN ADD THE BASE NUMBER
 ADC #$4B ; TO FORM THE SHAPE NUMBER
 STA THIEFSHAPE ;-STORE FOR OTHER ROUTINES
 RTS
*
*
DRAWMATCHTHIEF LDA THIEFSHAPE ;-TRANSFER VARIABLES
 STA SHAPE ; FOR CHARACTER GENERATOR
 STA LASTTHIEFSHAPE ; AND FOR THE
 LDA THIEFX ; ERASETHEIF ROUTINE 
 STA XLOC
 STA LASTTHIEFX
 LDA THIEFY
 STA YLOC
 STA LASTTHIEFY
 JSR CHARACTERGEN ;-DRAW THIEF CHARACTER
 RTS
*
*
SETMATCHLOCS LDA THIEFX ;-TAKE THIEFX AND ADJUST IT
 SEC ; TO GENERATE A MATCHX
 SBC #$02
 STA MATCHX
 LDA #$00 ;-SET DIRECTION TO ZERO
 STA MATCHDIRECTION
 LDA CTRLCODE ;-IF HE IS FACING RIGHT
 AND #$01 ; THEN FALL THROUGH AND
 BEQ NOTFACINGRIGHT ; ADJUST MATCHX
 LDA MATCHX ; SO THAT IT FALLS
 CLC ; TO THE RIGHT
 ADC #$06 ; OF THE THIEF
 STA MATCHX
 LDA #$04 ;-IF GOING RIGHT SET DIRECTION
 STA MATCHDIRECTION ; TO BE FOUR
NOTFACINGRIGHT LDA #$5A ;-SET UP STARTING  MATCHY
 STA MATCHY
 RTS
*
*
POURPOISON JSR ERASETHIEF ;-ERASE LAST THIEF FROM SCREEN
 JSR DRAWTHIEFPOURING ;-PUT APPROP CHAR OF DUMPING POISON
 JSR DRAWPOISONPILE ;-ANIMATE PILE OF POISON BUILDING UP ON FLOOR
 JSR SETPOISONLOC ;-SET VARIABLE TO POINT TO WHERE POISON IS
 JSR NOMOREPOISON ;-SET IT SO THE POISON CAN NO LONGER BE USED
 RTS ;-GO HOME
*
*
DRAWTHIEFPOURING LDA CTRLCODE ;-GENERATE A NEW THIEF
 AND #$01 ; SHAPE FACING THE SAME DIRECTION AND
 ASL A ; BEING ON THE PROPER
 STA THIEFSHAPE ; EVEN OR ODD SHAPE
 LDA THIEFX 
 AND #$01
 CLC
 ADC THIEFSHAPE
 ADC #$90
 STA THIEFSHAPE
 STA SHAPE ;-STORE FOR CHARACTERGEN
 STA LASTTHIEFSHAPE ;-STORE FOR ERASE ROUTINE
 LDA #$56 ;-RESET YLOC,THEIFY AND
 STA THIEFY ; LASTTHIEFY TO POINT
 STA LASTTHIEFY ; AT THE YLOC FOR THE
 STA YLOC ; POISON POURING CHARACTER
 JSR CHARACTERGEN ;-DRAW THE NEW THIEF CHARACTER
 RTS
*
*
DRAWPOISONPILE LDA #$C0 ;-SET BOUNDARY SO PART OF PILE
 STA YBOUND2 ; BELOW THE FLOOR IS NOT PLOTTED
 LDA #$7F ;-SET UPPER BOUNDARY
 STA YBOUND
 LDA #$7D ;-SET STARTING YLOC
 STA YLOC
DRAWPILELOOP JSR DRAWPILE ;-PUT PILE ON THE SCREEN 
 LDA #$20 ;-DO A PAUSE TO SLOW
 JSR PAUSE ; THINGS DOWN
 JSR DRAWPILE ;-ERASE PILE AGAIN
 DEC YLOC ;-MOVE PILE UP BY ONE LINE
 LDA YLOC ;-SEE IF DONE
 CMP #$6F ; AND IF SO THEN
 BNE DRAWPILELOOP ; FALL THROUGH TO ENDING ROUTINE
 JSR DRAWPILE ;-PUT PILE ON THE SCREEN FOR GOOD
 LDA #$7E ;-RESET YBOUND
 STA YBOUND2
 RTS ;-GO HOME
*
*
DRAWPILE LDA #$95 ;-SET SHAPE FOR POISON
 STA SHAPE
 LDA THIEFX ;-SET UP XLOC FOR POISON
 STA XLOC
 DEC XLOC ;-MOVE PILE BACK ONE
 LDA CTRLCODE ;-SEE WHAT DIRECTION HE IS FACING
 AND #$01 ;-IF HE IS FACING RIGHT
 BEQ NOADJUSTPILE ; THEN FALL THROUGH AND
 LDA XLOC ; MOVE OVER BY THREE
 CLC
 ADC #$04 
 STA XLOC ;-STORE FOR CHARACTERGEN
NOADJUSTPILE JSR CHARACTERGEN ;-PUT POISON ON THE SCREEN
 RTS ;-GO HOME
*
*
SETPOISONLOC LDA THIEFX ;-SET UP XLOC FOR POISON
 STA POISONLOC 
 DEC POISONLOC ;-MOVE PILE BACK ONE
 LDA CTRLCODE ;-SEE WHAT DIRECTION HE IS FACING
 AND #$01 ;-IF HE IS FACING RIGHT
 BEQ NOADJUSTLOC ; THEN FALL THROUGH AND
 LDA POISONLOC ; MOVE OVER BY THREE
 CLC
 ADC #$04 
 STA POISONLOC ;-STORE LOCATION OF POISON 
NOADJUSTLOC RTS ;-GO HOME
*
*
NOMOREPOISON LDA #$00 ;-SET USELOC TABLE TO INDICATE
 STA USELOC+5 ; THAT HE CAN NO LONGER USE THE POISON
 RTS ;-GO HOME
* 
*
PRESERVELIFE LDA #$C0 ;-RESET BOUNDARIES ONE AND TWO
 STA YBOUND3
 STA YBOUND4
 BRK ;-REST NO YET WRITTEN
*
*
THROWSPEAR LDA #$00 ;-SET IT SO HE NO LONGER HAS
 STA TREASURE+08 ; THE SPEAR SO THAT HE CAN'T THROW IT AGAIN
 JSR ERASETHIEF ;-ERASE THIEF FROM SCREEN
 LDA LASTTHIEFSHAPE ;-SAVE SHAPE OF THIEF CHAR SO THAT
 STA SAFEA ; THIEF CAN BE RESTORED AFTER THROWING
 LDA #$50 ;-SET NEW YLOC
 STA THIEFY
 STA LASTTHIEFY
 LDA CTRLCODE ;-SET UP SHAPE
 AND #$01 ; WITH PROPER DIRECTION
 ASL A ; AND ODD/EVEN
 ASL A
 STA SPEARDIRECTION ;-STORE DIRECTION VALUE ($04=RIGHT, $00=LEFT)
 LDA XLOC ;-CHECK ODD/EVEN
 AND #$01
 ASL A
 ORA SPEARDIRECTION ;-COMBINE WITH DIRECTION
 CLC ; AND ADD THE
 ADC #$92 ; BASE ADDRESS OF THROW CHARS
 STA THIEFSHAPE ;-STORE THIS
 STA LASTTHIEFSHAPE
 JSR ERASETHIEF ;-USE ERASETHIEF TO PUT CHAR ON SCREEN
 JSR ANIMATE ;-ALLOW HAZARD ANIMATION TO CONTINUE
 JSR ERASETHIEF ;-ERASE THE THIEF CHAR JUST PUT ON THE SCREEN
 INC LASTTHIEFSHAPE ;-ADVANCE TO SECOND SHAPE
 INC THIEFSHAPE
 JSR ERASETHIEF ;-USE ERASETHIEF TO DRAW SECOND CHARACTER
 JSR ANIMATE ;-ALLOW HAZARD ANIMATION TO CONTINUE
 LDA THIEFX ;-SET SPEARX WHICH INDICATES BOTH THE LOCATION
 STA SPEARX ; OF THE SPEAR AND WHEATHER OR NOT IT IS FLYING
 LDA #$4A ;-SET SPEARY
 STA SPEARY
 JSR ERASETHIEF ;-ERASE THROW CHARACTER FROM SCREEN
 LDA #$56 ;-RESET THIEFY TO PROPER VALUE
 STA THIEFY
 STA LASTTHIEFY
 LDA SAFEA ;-GET SAVED SHAPE VALUE
 STA THIEFSHAPE ; AND RESTORE VARIABLES
 STA LASTTHIEFSHAPE
 JSR ERASETHIEF ;-USE ERASETHIEF TO PUT CHAR BACK ON SCREEN
 LSR SPEARDIRECTION ;-SHIFT SO IT CAN BE USED FOR THE SPEAR CHARS
NOTHROWSPEAR RTS ;-RETURN TO CONTROL
*
*
**************************************** 
*FALL0 ROUTINE ANIMATES A FALL FROM LEVEL 0
*TO LEVEL 1,KEEPING THE ANIMATION OF THE
*SUBWAY GOING,AND USING APPROPRIAT CHARACTERS
*IF HE LANDS ON THE SUBWAY. IN THIS CASE IT 
*WOULD ANIMATE HIM ON TOP OF THE SUBWAY AND
*ALLOW HIM TO JUMP OFF.
**************************************** 
*
FALL0 LDA #$31 ;-SET THIEFSHAPE 
 STA THIEFSHAPE
 LDA #$00 ;-SET THIEFX TO 0
 STA THIEFX
 DEC THIEFY ;-ADJUST THIEFY FOR FALL CHARACTERS
FALL0LOOP JSR ERASETHIEF ;-ERASE THIEF ALREADY ON SCREEN 
 LDA THIEFY ;-MOVE Y LOCATION
 CLC ; DOWN BY FOUR LINES
 ADC #$04
 STA THIEFY
 LDA THIEFX ;-TRANSFER X,Y AND SHAPE
 STA LASTTHIEFX ; TO THE CHARACTER
 STA XLOC ; AND TO THE ERASETHIEF
 LDA THIEFY ; ROUTINES
 STA LASTTHIEFY
 STA YLOC
 LDA THIEFSHAPE 
 STA LASTTHIEFSHAPE
 STA SHAPE
 JSR CHARACTERGEN ;-PUT THE NEW CHARACTER ON THE SCREEN
 JSR ANIMATE ;-DO SUBWAY ANIMATION
 LDA THIEFY ;-IF HE ISNT AT THE HEIGHT
 CMP #$35 ; TO FALL SEAT FIRST ONTO THE SUBWAY
 BNE CONTFALL0 ; THEN SKIP NEXT SECTION
 LDA SUBWAYX ;-IF THE SUBWAY IS NOT COMPLETELY ON 
 BMI SKIPLEFTCHECK ; THE SCREEN THEN SKIP NEXT SECTION
 CLC ;-SEE IF HE IS GOING TO 
 ADC #$05 ; HIT THE SUBWAY OR NOT 
 CMP THIEFX
 BCS CONTFALL0 ;-IF HE IS GOING TO MISS, KEEP FALLING
SKIPLEFTCHECK CLC ;-IS HE GOING TO LAND IN
 ADC #$14 ; FRONT OF THE SUBWAY?
 CMP THIEFX ;-IF HE IS THEN
 BCC CONTFALL0 ; KEEP FALLING
 JMP FALLSEAT0 ;-GO TO ROUTINE WHICH FALLS HIM ONTO SUBWAY
CONTFALL0 LDA SUBWAYX
 CMP #$ED ;IS SUBWAY COMPLETELY ON SCREEN
 BCS CONTFALLCHECK ;IF NOT IGNORE NEXT CHECK
 CMP THIEFX
 BCS CONT2FALL0 ;IF THIEFX IS LESS THAN SUBWAYX HE LIVES 
CONTFALLCHECK CLC 
 ADC #$13
 CMP THIEFX
 BCC CONT2FALL0 ;IF THIEFX IS GREATER THAN SUBWAYX+13 THEN HE LIVES 
 LDA THIEFY ;-IS HE FAR ENOUGH DOWN
 CMP #$3C ; TO BE HIT BY THE SUBWAY?
 BCC CONT2FALL0 ;- IF NOT HE LIVES
 JMP DEATH ; OTHERWISE HE DIES
CONT2FALL0 LDA THIEFY
 CMP #$55 ;-IS HE ON THE GROUND ON LEVEL 1
 BNE FALL0LOOP ;-IF NOT KEEP FALLING
 LDA #$1F ;-SET NEW BOUNDARY FOR
 STA RIGHTBOUND ; HOW FAR RIGHT HE CAN GO
 LDA #$56 ;-SET FLOOR INDICATOR
 STA FLOORLOC ; TO MIDDLE LEVEL
 STA THIEFY ;-SET THIEFY TO FLOOR
 INC LEVEL# ;-ADVANCE POINTER TO LEVEL 1
 RTS ;-RETURN TO CONTROL 
*
*
FALLSEAT0 LDA #$32 ;-SET SHAPE TO BE FALLING
 STA THIEFSHAPE ; SEAT FIRST
FALLSEATLOOP JSR ERASETHIEF ;-ERASE THIEF ALREADY ON SCREEN
 LDA THIEFY ;-MOVE Y LOCATION
 CLC ; DOWN BY FOUR LINES
 ADC #$04
 STA THIEFY
 LDA THIEFX ;-TRANSFER X,Y AND SHAPE
 STA LASTTHIEFX ; TO THE CHARACTER
 STA XLOC ; AND TO THE ERASETHIEF
 LDA THIEFY ; ROUTINES
 STA LASTTHIEFY
 STA YLOC
 LDA THIEFSHAPE 
 STA LASTTHIEFSHAPE
 STA SHAPE
 JSR CHARACTERGEN ;-PUT THE NEW CHARACTER ON THE SCREEN
 JSR ANIMATE ;-DO SUBWAY ANIMATION
 LDA THIEFY ;-SEE IF HE HAS LANDED
 CMP #$3D ; ON THE SUBWAY
 BNE FALLSEATLOOP ;-IF NOT KEEP LOOPING
 LDA #$25 ;-HE HAS LANDED SO SET SHAPE FOR HIM TO
 STA THIEFSHAPE ; LIE ON SUBWAY
 LDA #$49 ;-SET THIEFY TO BE 
 STA THIEFY ; ON THE SUBWAY
 LDA THIEFX ;-SET UP OFFSET FOR BETWEEN
 SEC ; SUBWAYX AND THIEFX
 SBC SUBWAYX
 STA THIEFX
 LDA $C010 ;-CLEAR KEYBOARD SO HE DOESNT JUMP OFF ACCIDENTALLY
RIDESUBWAYLOOP JSR ERASETHIEF ;-ERASE THIEF FROM SREEN
 LDA SUBWAYX ;-SET UP THIEF'S X LOCATION
 CLC
 ADC THIEFX
 STA XLOC ;-STORE FOR CHARACTER GENERATOR
 STA LASTTHIEFX ; AND FOR ERASE ROUTINE
 LDA THIEFY ;-TRANSFER Y LOCATION
 STA YLOC ; TO CHARACTER GENERATOR
 STA LASTTHIEFY ; AND TO ERASE ROUTINE
 LDA XLOC ;-SET APPROPRIATE 
 AND #$01 ; ODD/EVEN  
 ASL A ; SHAPE 
 ASL A ; CHARACTERS AND 
 ADC THIEFSHAPE ; TRANSFER SHAPE TO 
 STA SHAPE ; CHARACTER GENERATOR AND
 STA LASTTHIEFSHAPE ; TO ERASE ROUTINE
 JSR CHARACTERGEN ;-PUT HIM ON THE SCREEN
 JSR ANIMATE ;-MOVE SUBWAY
 LDA $3C0 ;-IS THE KEYBOARD OR THE JOYSTICK BEING USED
 BEQ RIDEKEYCHECK ;-IF KEYBOARD THEN BRANCH
 LDA $C061 ;-HAS THE JOYSTICK BUTTON (JUMP)
 BMI FINISHRIDE ; BEEN PRESSED? IF SO THEN JUMP OFF SUBWAY
 JMP RIDESUBWAYLOOP ;-IF IT HASN'T THEN KEEP LOOPING
RIDEKEYCHECK LDA $C000 ;-HAS A KEY BEEN PRESSED?
 STA LASTKEY ;-STORE FOR CONTROL 
 BMI FINISHRIDE ;-IF SO JUMP OFF SUBWAY
 JMP RIDESUBWAYLOOP ;-IF NOT KEEP LOOPING
FINISHRIDE STA $C010 ;-CLEAR KEYBOARD
 LDA LASTTHIEFX ;-SEE IF HE CATCHES THE LADDER
 CMP #$13 
 BEQ CAUGHTLADDER ;-HE CAUGHT IT!!
 CMP #$14
 BEQ CAUGHTLADDER ;-HE CAUGHT IT!!
 JMP DEATH ;-HE MISSED IT!!!!!
CAUGHTLADDER LDA #$46 ;-PUT HIM RIGHT ON THE LADDER
 STA THIEFY
 JSR ERASETHIEF ;-ERASE THIEF FROM SCREEN
 LDA THIEFY ;-TRANSFER VARIABLES TO
 STA YLOC ; CHARACTER GENERATOR AND
 STA LASTTHIEFY ; TO ERASE ROUTINE
 LDA LASTTHIEFX
 STA XLOC
 STA THIEFX
 LDA THIEFSHAPE
 STA SHAPE
 STA LASTTHIEFSHAPE
 JSR CHARACTERGEN ;-PUT HIM ON THE SCREEN
 LDA $3C0 ;-IS IT KEYBOARD OR JOYSTICK?
 BEQ RIDEKEYLOOP
RIDEBUTTONLOOP JSR ANIMATE ;-CONTINUE HAZARD ANIMATION
 LDA $C061 ;-WAIT UNTIL THE BUTTON
 BMI RIDEBUTTONLOOP ; HAS BEEN RELEASED
RIDEJOYLOOP LDA $C061 ;-HAS THE BUTTON BEEN PRESSED?
 BMI JUMPDOWN ;-IF SO THEN JUMP BACK DOWN
 JSR ANIMATE ;-CONTINUE HAZARD ANIMATION
 JMP RIDEJOYLOOP ;-CONTINUE LOOP
RIDEKEYLOOP LDA $C000 ;-HAS A KEY BEEN PRESSED?
 STA LASTKEY ;-STORE KEY VALUE FOR CONTROL 
 BMI JUMPDOWN ;-IF SO THEN JUMP BACK DOWN
 JSR ANIMATE ;-CONTINUE HAZARD ANIMATION
 JMP RIDEKEYLOOP ;-CONTINUE LOOP
JUMPDOWN STA $C010 ;-CLEAR THE KEYBOARD 
 LDA $C061 ;-SAVE STATUS OF JUMP BUTTON
 STA LASTBUTTON0 ; FOR JUMP ROUTINE
 JSR ERASETHIEF ;-ERASE CHARACTER ALREADY ON SCREEN
 DEC THIEFSHAPE ;-SET FOR FIRST JUMP DOWN CHARACTER
 LDA THIEFX ;-TRANSFER CO-ORDS TO
 STA XLOC ; CHARACTER GENERATOR 
 STA LASTTHIEFX ; AND TO ERASE ROUTINE
 LDA THIEFY
 STA YLOC
 STA LASTTHIEFY
 LDA THIEFSHAPE 
 STA SHAPE
 STA LASTTHIEFSHAPE
 JSR CHARACTERGEN
 JSR ANIMATE ;-ALLOW HAZARD ANIMATION TO CONTINUE
 INC THIEFSHAPE ;-SET SHAPE TO NEXT CHARACTER
 INC THIEFSHAPE
 JSR ERASETHIEF ;-ERASE CHARACTER ALREADY ON SCREEN
 LDA THIEFX ;-TRANSFER CO-ORDS TO
 STA XLOC ; CHARACTER GENERATOR 
 STA LASTTHIEFX ; AND TO ERASE ROUTINE
 LDA #$50 ;-SET PROPER YLOC  
 STA YLOC
 STA LASTTHIEFY
 LDA THIEFSHAPE 
 STA SHAPE
 STA LASTTHIEFSHAPE
 JSR CHARACTERGEN
 LDA #$56 ;-RESTORE THIEFY TO FLOOR
 STA THIEFY
 INC LEVEL# ;-SET TO LEVEL ONE
 STA FLOORLOC ;-SET FLOOR INDICATOR TO MIDDLE LEVEL
 LDA #$1F ;-SET NEW BOUNDARY FOR
 STA RIGHTBOUND ; HOW FAR RIGHT HE CAN GO
 RTS
*
*
**************************************************
* ROUTINE WHICH ERASES THE LAST THIEF CHARACTER
* PUT ON THE SCREEN (INDICATED IN LASTTHIEFX,
* LASTTHIEFY,AND LASTTHIEFSHAPE) BY EXCLUSIVE OR
**************************************************
*
*
ERASETHIEF LDA LASTTHIEFX ;-TRANSFER X,Y
 STA XLOC ; LOCATIONS AND 
 LDA LASTTHIEFY ; SHAPE OF THIEF 
 STA YLOC ; CHARACTER TO BE 
 LDA LASTTHIEFSHAPE ; ERASED TO THE
 STA SHAPE ; CHARACTER GENERATOR
 JSR CHARACTERGEN ;-ERASE THIEF CHARACTER BY XOR
 RTS
*
*
DEATH JSR BEEP ;MAKE ONE BEEP 
 RTS  ;RETURN TO CALLER
*
*
FALL6 LDA THIEFX ;-SET SEQUENCE#
 AND #$01 ; TO THE APPROPRIATE
 ASL A ; EVEN/ODD CHARACTER
 CLC  ; FOR THE FALL
 ADC #$31
 STA SEQUENCE#
FALL6LOOP JSR ERASETHIEF ;-ERASE THIEF ALREADY ON SCREEN 
 INC THIEFY ;-MOVE Y LOCATION DOWN ONE
 LDA THIEFX ;-TRANSFER X,Y AND SHAPE
 STA LASTTHIEFX ; TO THE CHARACTER
 STA XLOC ; AND TO THE ERASETHIEF
 LDA THIEFY ; ROUTINES
 STA LASTTHIEFY
 STA YLOC
 LDA SEQUENCE#
 STA LASTTHIEFSHAPE
 STA SHAPE
 JSR CHARACTERGEN ;-PUT THE NEW CHARACTER ON THE SCREEN
 JSR ANIMATE ;-DO HAZARD ANIMATION
 LDA #$3C0 ;-SEE IF JOYSTICK IS BEING USED
 BNE BUTTONTEST ;-IF SO THEN TEST BUTTON INSTEAD OF KEYBOARD
 LDA $C000 ;-CHECK KEYBOARD
 BPL KEEPFALLING ; CONTINUE IF NO KEY PRESSED
 CMP #'U' ;-IF A KEY HAS BEEN PRESSED
 BEQ PRESERVELIFETARG ; BRANCH TO LIFE PRESERVER ROUTINE
 JMP KEEPFALLING ;-JUMP PAST BUTTON CHECK ROUTINE
BUTTONTEST LDA $C062 ;-SEE IF THE USE BUTTON HAS BEEN PRESSED
 BMI PRESERVELIFETARG ;-IF SO BRANCH TO LIFE PRESERVER ROUTINE
KEEPFALLING LDA THIEFY
 CMP #$A0 ;-HAS HE DROWNED YET? 
 BNE FALL6LOOP ;-IF NOT KEEP FALLING
 JMP DEATH ;-IF HE FALLS THIS FAR HE IS DEAD
*
*
PRESERVELIFETARG JMP PRESERVELIFE
*
*
BLOADANIMATE JSR PRINTTEXT ;-PUT TEXT MESSAGE ON SCREEN
 LDA BSTRING+$0A ;-TRANSFER NUMBER OF FILE TO
 STA BANIMATE+$0D ; BLOAD ANIMATE STRING
 LDX #$00 ;-INITIALIZE COUNTER
BANIMATELOOP LDA BANIMATE,X ;-GET CHARACTER FROM STRING
 JSR DOS ;-OUTPUT IT TO DOS
 INX ;-INCREASE INDEX
 CPX #$0F ;-SEE IF ALL THE CHARACTERS
 BNE BANIMATELOOP ; HAVE BEEN OUTPUTED AND LOOP IF NOT
 JSR PRINTTEXT ;-ERASE MESSAGE FROM SCREEN
 RTS ;-GO BACK HOME TO SCROLL
*
*
 CHN HEIST-Ic 
----------------------------------

Textfile HEIST-Ib
