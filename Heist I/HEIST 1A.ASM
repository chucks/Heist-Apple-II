 SBTL 
BUFFERHI EQU $FE 
BUFFERLO EQU $FD 
DOS EQU $9EBD 
LOADDR EQU $F9
HIADDR EQU $FA
SCREENLO EQU $FB
SCREENHI EQU $FC
TABLE1 EQU $4AB0
TABLE2 EQU $4BB0
LOOKUPHI EQU $1E80 
LOOKUPLO EQU $1F40 
JOYREAD EQU $FB1E
PAUSE EQU $FCA8
BEEP EQU $FBDD
ANIMATE EQU $1A00
*
*
 ORG $7FD 
*
*
 JSR DEMO ;-DO DEMO 
 JMP START ;-START GAME
*
*
CHARGENTARG JMP CHARACTERGEN ;-FIXED ADDRESS TARGET
*
*
*********************************
* THIS ROUTINE SCROLLS THREE SCREENS ONTO THE
* DISPLAY TO START THE GAME.  IT THEN PLACES THE 
* THIEF ON THE DISPLAY AND SETS THE BOUNDARYS FOR   
* RUNNING BEFOR FALLING INTO THE ROUTINE 
* WHICH CONTROLS MOVEMENT OF THE THIEF
*********************************
*
START LDA #$00 ;-SET SCROLL TO
 STA SCROLLDIRECTION ; SCROLL DOWNWARD 
 LDA #$C0 ;-RESET ALL CUT-OFF AREAS
 STA YBOUND
 STA YBOUND2
 STA YBOUND3
 STA YBOUND4
 JSR SCROLL ;-SCROLL 1ST SCREEN
 LDA #$C0 ;-RESET ALL CUT-OFF AREAS
 STA YBOUND
 STA YBOUND2
 STA YBOUND3
 STA YBOUND4
 JSR SCROLL ; 2ND SCREEN
 LDA #$02 ;-ALLOW TEXT PRINTING 
 STA LEVEL#
 LDA #$C0 ;-RESET ALL CUT-OFF AREAS
 STA YBOUND
 STA YBOUND2
 STA YBOUND3
 STA YBOUND4
 JSR SCROLL ; 3RD SCREEN
 LDA #$16 ;-SET FLOOR INDICATOR
 STA FLOORLOC ; TO UPPER LEVEL
 LDA #$0B ;-SET SHAPE,XLOC AND YLOC  
 STA SHAPE ; OF CHARACTER TO BE 
 STA LASTTHIEFSHAPE ; PLACED ON THE SCREEN
 LDA #$14 ; AND PASS THEM  
 STA XLOC ; TO THE ERASE THIEF ROUTINE 
 STA LASTTHIEFX ; TO ALLOW 
 STA THIEFX ; THE CHARACTER TO 
 LDA #$16 ; BE ERASED WHEN HE 
 STA YLOC ; STARTS MOVING 
 STA LASTTHIEFY
 STA THIEFY
 JSR CHARACTERGEN ;-PUT THE THIEF ON THE SCREEN
 LDA #$1D ;-SET BOUNDARY WHICH DETERMINES 
 STA RIGHTBOUND ; HOW FAR RIGHT HE CAN RUN
 LDA #$00 ;-SET BOUNDARY WHICH DETERMINES
 STA LEFTBOUND ; HOW FAR LEFT HE CAN RUN
 STA LEVEL# ;-SET LEVEL# TO ZERO 
 JMP CONTROL
*
*********************************
* THIS ROUTINE IS THE MAIN LOOP WHICH READ EITHER THE
* KEYBOARD OR THE JOYSTICK DEPENDING ON WHAT IS 
* INDICATED IN LOCATION $300.  THE CODE CONSISTS OF TWO
* SECTIONS, ONE READS THE JOYSTICK AND STORES AN
* APPROPRIATE CONTROL CODE IN CTRLCODE AND THEN JUMPS
* TO THE APPROPRIATE ROUTINE TO PERFORM THIS FUNCTION.   
* THE SECOND ROUTINE OPERATES IDENTICALLY WITH THE 
* EXCEPTION THAT IS READ THE KEYBOARD RATHER THAN THE
* JOYSTICK.  LASTCTRL IS MAINTAINED SO THAT THE ROUTINE
* CAN DETERMINE THE WHAT THE THIEF WAS DOING LAST TIME
* THE CODES USED FOR CTRLCODE ARE:
*
* FUNCTION      CODE      KEY
*
* STOP LEFT     $00       SPACE
* STOP RIGHT    $01       SPACE
* RUN LEFT      $10       K
* RUN RIGHT     $11       L
* JUMP LEFT     $20       J
* JUMP RIGHT    $21       J
* CLIMB UP      $30       A
* CLIMB DOWN    $31       Z
* USE LEFT      $40       U
* USE RIGHT     $41       U
*********************************
*
KEYBOARDTARG JMP KEYBOARD
*
FALL0TARG JSR FALL0 
*
CONTROL LDA LEVEL# ;-CHECK TO SEE IF
 BNE NOTLEVEL0 ; HE IS ON LEVEL 0
 LDA THIEFX ;-IF SO IS THERE 
 CMP #$03 ; GROUND BENEATH HIM
 BEQ FALL0TARG ;-IF THERE ISNT THEN JUMP TO FALL ROUTINE 
NOTLEVEL0 LDA CTRLCODE ;-SAVE THE PREVIOUS
 STA LASTCTRL ; CONTROL CODE
 LDA $3C0 ;-INDICATES KEYBOARD($00) OR JOYSTICK($01)
 BEQ KEYBOARDTARG ;-BRANCH TO KEYBOARD ROUTINE IF $00
 LDA LASTBUTTON0 ;-IF BUTTON WAS DOWN LAST TIME
 BMI NOTJUMP ; THEN DON'T JUMP AGAIN
 LDA $C061 ;-CHECK BUTTON 0 (JUMP)
 STA LASTBUTTON0 ;-STORE FOR NEXT TIME
 BPL NOTJUMP ;-SKIP TO NEXT ROUTINE IF BUTTON NOT PRESSED
 LDA CTRLCODE ;-WAS HE GOING
 AND #$01 ; LEFT OR RIGHT 
 CLC
 ADC #$20 ;-FORM NEW CODE
 STA CTRLCODE
 JSR JUMP ;-CALL JUMP ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOTJUMP LDA $C061 ;-SAVE STATUS OF BUTTON 0
 STA LASTBUTTON0 ; FOR CHECK NEXT TIME
 LDA LASTBUTTON1 ;-IF BUTTON WAS DOWN LAST TIME
 BMI NOTUSE ; THEN DON'T USE AGAIN
 LDA $C062 ;-CHECK BUTTON 1 (USE)
 STA LASTBUTTON1 ;-STORE FOR NEXT TIME
 BPL NOTUSE ;-SKIP TO NEXT ROUTINE IF BUTTON NOT PRESSED
 LDA CTRLCODE ;-WAS HE GOING 
 AND #$01 ; LEFT OR RIGHT
 CLC
 ADC #$40 ;-FORM NEW CODE
 STA CTRLCODE
 JSR USE ;-CALL USE ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOTUSE LDA $C062 ;-SAVE STATUS OF BUTTON 1
 STA LASTBUTTON1
 LDX #$01 ;-READ PADDLE 1 (VERTICAL
 JSR JOYREAD ; AXES OF JOYSTICK)
 STY SAFEA ;-STORE VALUE IN MEMORY FOR BIT INSTRUCTION 
 BIT SAFEA ;-CHECK BIT 6 AND 7
 BMI NOTUP ; TO DETERMINE WHETHER
 BVS NOTUP ; THE POSITION IS UP
 LDA #$30 ;-SET NEW CONTROL
 STA CTRLCODE ; CODE FOR CLIMB UP
 JSR CLIMB ;-CALL CLIMB ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOTUP BPL NOTDOWN ;-CHECK IF POSITION
 BVC NOTDOWN ; OF JOYSTICK IS DOWN
 LDA #$31 ;-SET NEW CONTROL
 STA CTRLCODE ; CODE FOR CLIMB DOWN
 JSR CLIMB ;-CALL CLIMB ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOTDOWN LDY #$FF ;-DO A FAKE PADDLE READ
FAKELOOP LDA SAFEA ; TO PREVENT LAST READ
 LDA SAFEA ; FROM INTERFERING THE PRESENT
 DEY ; ONE AS THAT COULD CAUSE
 BNE FAKELOOP ; A FALSE READING
 LDX #$00 ;-READ PADDLE 0 (HORIZONTAL
 JSR JOYREAD ; AXES OF JOYSTICK)
 STY SAFEA ;-STORE VALUE IN MEMORY FOR BIT INSTRUCTION 
 BIT SAFEA ;-CHECK BIT 6 AND 7
 BMI NOTLEFT ; TO DETERMINE WHETHER
 BVS NOTLEFT ; THE POSITION IS LEFT
 LDA #$10 ;-SET NEW CONTROL
 STA CTRLCODE ; CODE FOR RUN LEFT
 JSR RUN ;-CALL RUN ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOTLEFT BPL NOTRIGHT ;-CHECK TO SEE IF
 BVC NOTRIGHT ; JOYSTICK POSITION IS RIGHT
 LDA #$11 ;-SET NEW CONTROL 
 STA CTRLCODE ; CODE FOR RUN RIGHT
 JSR RUN ;-CALL RUN ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOTRIGHT LDA CTRLCODE ;-SET NEW CONTROL
 AND #$01 ; CODE FOR STOP IN THE
 STA CTRLCODE ; APPROPRIATE DIRECTION
 JSR ANIMATE ;-CALL SECTION WHICH CONTROLS THE REMAINDER OF THE ANIMATION
 JMP CONTROL
*
* THIS SECTION DOES THE SAME AS ABOVE
* EXCEPT READS JOYSTICK 
*
KEYBOARD LDA $C000 ;-IF A KEY HAS NOT BEEN  
 BMI KEYPRESSED ; PRESSED THEN FALL THROUGH AND 
 LDA LASTKEY ; LOAD WITH THE KEY PRESSED LAST 
KEYPRESSED STA $C010 ;-CLEAR KEYBOARD STROBE
 STA LASTKEY ;-STORE KEY VALUE FOR NEXT TIME
 CMP #'U' ;-IS IT A
 BNE NOUSE ; USE
 LDA CTRLCODE ;-IF SO SET NEW CONTROL CODE
 CLC ; FOR THE
 ADC #$40 ; APPROPRIATE
 STA CTRLCODE ; USE DIRECTION
 JSR USE ;-CALL USE ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOUSE CMP #'J' ;-IS IT A
 BNE NOJUMP ; JUMP?
 LDA CTRLCODE ;-IF SO SET NEW
 AND #$01 ; CONTROL CODE
 CLC  ; FOR THE
 ADC #$20 ; APPROPRIATE
 STA CTRLCODE ; JUMPDIRECTION
 JSR JUMP ;-CALL JUMP ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOJUMP CMP #'K' ;-IS IT A
 BNE NOLEFT ; RUN LEFT?
 LDA #$10 ;-IF SO SET NEW CONTROL CODE
 STA CTRLCODE ; FOR RUN LEFT
 JSR RUN ;-CALL RUN ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOLEFT CMP #'L' ;-IS IT A
 BNE NORIGHT ; RUN RIGHT?
 LDA #$11 ;-IF SO SET NEW CONTROL CODE
 STA CTRLCODE ; FOR RUN RIGHT
 JSR RUN ;-CALL RUN ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NORIGHT CMP #'A' ;-IS IT A
 BNE NOUP ; CLIMB UP?
 LDA #$30 ;-IF SO SET NEW CONTROL
 STA CTRLCODE ; CODE FOR CLIMB UP
 JSR CLIMB ;-CALL CLIMB ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NOUP CMP #'Z' ;-IS IT A
 BNE NODOWN ; CLIMB DOWN?
 LDA #$31 ;-IF SO SET NEW CONTROL CODE 
 STA CTRLCODE ; FOR CLIMB DOWN
 JSR CLIMB ;-CALL CLIMB ROUTINE
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
NODOWN LDA CTRLCODE ;-DEFAULT TO A STOP CODE IN THE 
 AND #$01 ; APPROPRIATE DIRECTION 
 STA CTRLCODE 
 JSR ANIMATE ;-DO ALL HAZARD ANIMATION
 JMP CONTROL
*
*
FALL3TARG JMP FALL3 ;TARGET TO HEIST-Ib
*
*
*****************************************
* ROUTINE TO RUN CHARACTER LEFT OR RIGHT
* IN ACCORDANCE TO THE VALUE IN CTRLCODE. 
* THE ROUTINE AUTOMATICALY ADJUSTS FOR
* ODD OR EVEN LOCATIONS.  THE CHARACTER
* IS MOVED ONE LOCATION FOR EACH CALL TO
* THE ROUTINE AND THE CHARACTERS ARE
* SEQUENCED THROUGH THE FOUR POSS-
* IBILLITIES. 
*****************************************
*
DONERUNTARG JMP DONERUN
*
RUN LDA THIEFY ;-IS HE ON THE
 CMP FLOORLOC ; GROUND?
 BNE DONERUNTARG ;-IF NOT ABORT
 LDA LEVEL# ;-SEE IF HE IS ON
 CMP #$03 ; LEVEL THREE AND
 BNE NOFALL ; WHETHER OR NOT
 LDA HOLELOC ; HE IS OVER
 CMP THIEFX ; THE HOLE
 BEQ FALL3TARG 
NOFALL LDA CTRLCODE ;-FIND WHICH DIRECTION
 AND #$01 ; HE IS GOING AND
 BEQ RUNLEFT ; INCREASE OR
 INC THIEFX ; DECREASE THIEFX
 JMP INBOUND? ; APPROPRIATLY
RUNLEFT DEC THIEFX
INBOUND? LDA THIEFX ;-SUBTRACT LEFTBOUND TO ADJUST
 SEC  ; FOR THE LEFT WALL,
 SBC LEFTBOUND ; THEN COMPARE
 CMP RIGHTBOUND ; TO CHECK IF IT IS BETWEEN
 BCC INBOUNDS! ; THE TWO WALLS.
 BPL OFFRIGHT ;-IF IT IS NOT, IS IT OFF THE LEFT SIDE?
 INC THIEFX ;-IF SO MOVE IT ONE RIGHT
 LDA CTRLCODE ;-SET IT SO HE DOESNT
 AND #$01 ; KEEP RUNNING AND
 STA CTRLCODE ; RETURN TO THE
 RTS ; CONTROL ROUTINE
OFFRIGHT DEC THIEFX ;-IF OFF THE RIGHT EDGE THEN BRING IT BACK ON
 LDA CTRLCODE ;-SET IT SO HE DOESNT
 AND #$01 ; KEEP RUNNING AND
 STA CTRLCODE ; RETURN TO THE
 RTS ; CONTROL ROUTINE
INBOUNDS! LDA CTRLCODE ;-WAS HE RUNNING (AND IN THE SAME
 CMP LASTCTRL ; DIRECTION) LAST TIME?
 BEQ RUNOUT ;-IF SO BRANCH TO OUTPUT SECTION
 LDA THIEFX ;-SET SEQUENCE BYTE TO
 AND #$01 ; EITHER 0 OR 1 DEPENDING
 STA SEQUENCE# ; ON EVEN/ODD OF THIEFX
 LDA CTRLCODE ;-GENERATE DIRECTION
 AND #$01 ; NUMBER. 00=LEFT,
 ASL A ; 04=RIGHT
 ASL A
 CLC  ;-ADD THIS ONTO
 ADC SEQUENCE# ; THE SEQUENCE NUMBER
 STA SEQUENCE# ; TO FORM A CHARACTER OFFSET
RUNOUT JSR ERASETHIEF ;-ERASE CHARACTER ALREADY ON THE SCREEN
 LDA THIEFX ;-TRANSFER
 STA XLOC ; PARAMETERS
 STA LASTTHIEFX ; TO CHARACTER 
 LDA THIEFY ; GENERATOR AND
 STA YLOC ; STORE THEM FOR
 STA LASTTHIEFY ; THE ERASE THIEF ROUTINE
 LDA MASKON ;-ADJUST IF HE
 ASL A ; HAS THE GASMASK
 ASL A ; ON TO USE THE
 ASL A ; CHARACTER NUMBERS
 ADC #$0B ; WHICH ARE EIGHT
 CLC ; HIGHER AND THEN FORM 
 ADC SEQUENCE# ; CHARACTER NUMBER 
 STA SHAPE ;-STORE FOR CHARACTER GENERATOR
 STA LASTTHIEFSHAPE ; AND FOR ERASE THIEF ROUTINE
 JSR CHARACTERGEN ;-PUT IT ON THE SCREEN
 INC SEQUENCE# ;-INCREASE SEQUENCE NUMBER 
 LDA SEQUENCE# ;AND CHECK TO SEE IF
 AND #$03 ; IT NEEDS TO BE RESET 
 BNE DONERUN ;-BRANCH IF NOT
 LDA THIEFX ;:IF THIEFX IS EVEN, 
 CLC  ; MAKE IT ODD AND 
 ADC #$01 ; VISA VERSA
 AND #$01 ;-FORM SEQUENCE NUMBER 
 STA SEQUENCE# ; OF 0 OR 1 DEPENDING 
 LDA CTRLCODE ; ON EVEN/ODD OF 
 AND #$01 THIEFX AND ADD 
 ASL A ; DIRECTION OFFSET (0=LEFT,
 ASL A ; 04=RIGHT) 
 CLC 
 ADC SEQUENCE# 
 STA SEQUENCE# 
DONERUN RTS  ;-RETURN TO CONTROL SECTION 
*
*
FALL6TARG JMP FALL6
*
*
*****************************************
* THIS ROUTINE CLIMBS THE CHARACTER 
* EITHER UP OR DOWN THE LADDER IN
* ACCORDANCE TO CTRLCODE.  THIEFX IS 
* CHECKED AGAINST THE VALUES IN LADDERLOC
* TO DETERMINE WHETHER OR NOT HE CAN 
* CLIMB AT THAT LOCATION ON THAT LEVEL.
* THE ROUTINE ALLOWS THE CHARACTER TO
* CLIMB PART WAY UP OR DOWN THE LADDER 
* AND GO BACK AGAIN.  THE CHARACTER CAN
* ALSO BE STOPPED ANYWHERE ON THE LADDER. 
* WHEN THE TOP OR BOTTOM OF THE LADDER
* IS REACHED SCROLL IS CALLED TO PLACE
* NEW SEGMENT ON SCREEN AND RESET THIEFY 
* AND LASTHIEFY.
*****************************************
CLIMB LDA LEVEL# ;-CHECK LEVEL HE IS ON
 BEQ DONECLIMBTARG ;-IF IT IS LEVEL ZERO THEN EXIT ROUTINE
 CMP #$06 
 BNE KEEPCLIMBING ;-IF NOT LEVEL6, BRANCH TO CLIMB ROUTINE
 LDA THIEFY ;-IF SO THEN IS HE
 CMP #$74 ; PAST THE FALL POINT
 BCS FALL6TARG ;-IF SO THEN BRANCH
KEEPCLIMBING LDA THIEFY ;-IS HE OFF THE GROUND
 CMP #$56 ; (ALREADY CLIMBING) ??
 BNE ALREADYCLIMB ;-IF SO SKIP LADDERLOC TEST
 LDA CTRLCODE ;-SHIFT BIT 0 OF
 LSR A ; CTRLCODE INTO BIT 0 
 LDA LEVEL# ; OF LEVEL TO FORM 
 ROL A ; AN INDEX TO THE
 ASL A ; LADDER LOC. THIS IS MULTIPLIED BY FOUR
 ASL A ; AS THERE ARE FOUR LOCATIONS PER LADDER
 TAY ; THE FIRST LADDER FOR A LEVEL IS AN UP
 LDA LADDERLOC,Y ; LADDER WHILE THE SECOND IS A DOWN
 CMP THIEFX ;-IS HE IN THE CORRECT SPOT
 BEQ STARTCLIMB ;-HE IS
 INY ;-CHECK NEXT POSSIBLE LOCATION
 LDA LADDERLOC,Y ;-IS HE IN THIS SPOT
 CMP THIEFX
 BEQ STARTCLIMB ;-HE IS
 INY ;-CHECK NEXT LOC
 LDA LADDERLOC,Y ;-IS HE HERE
 CMP THIEFX
 BEQ STARTCLIMB ;-HE IS
 JMP DONECLIMBTARG ;-HE ISN'T IN THE RIGHT POSITION
STARTCLIMB TYA ;-SET THIEF RIGHT ON LADDER
 AND #$FC
 TAY
 LDA LADDERLOC,Y
 STA THIEFX
ALREADYCLIMB LDA CTRLCODE ;-FIND IF HE IS  
 AND #$01 ; CLIMBING UP
 BEQ CLIMBUP ; OR DOWN
 LDA THIEFY ;-IF HE ISNT ON THE GROUND
 CMP #$56 ; SKIP INTIALIZATION 
 BNE OLDCLIMBDOWN
 LDA LASTCTRL ;-IF HE WAS
 AND #$F0 ; ALREADY CLIMBING
 CMP #$30 ; THEN DONT 
 BEQ OLDCLIMBDOWN ; INITIALIZE THIEFY AND SEQUENCE#
 LDA #$56 ;-SET THIEFY TO BE ON THE FIRST RUNG
 STA THIEFY
 LDA #$00 ;-SET SEQUENCE NUMBER
 STA SEQUENCE# ; TO FIRST CHARACTER
 JMP CLIMBOUT ;-SKIP TO OUTPUT SECTION 
*
DONECLIMBTARG JMP DONECLIMB
*
OLDCLIMBDOWN LDA THIEFY ;-IF DOWN INCREASE 
 CLC  ; THIEFY TO THE NEXT
 ADC #$05 ; LOWER RUNG
 STA THIEFY ; OF THE LADDER
 LDX #$01 ;-SET TO SCROLL UP
 STX SCROLLDIRECTION ; IF NESSISARY
 CMP #$9C ; (WHEN HE IS AT THE 
 BEQ SCROLLTARG ; BOTTOM OF THE LADDER)
 JMP CLIMBOUT ;-SKIP TO OUTPUT SECTION
*
SCROLLTARG JMP SCROLL
*
CLIMBUP LDA THIEFY ;-IF HE ISNT ON THE GROUND
 CMP #$56 ; SKIP INTIALIZATION 
 BNE OLDCLIMBUP 
 LDA LASTCTRL ;-IF HE WAS
 AND #$F0 ; ALREADY CLIMBING
 CMP #$30 ; THEN DONT
 BEQ OLDCLIMBUP ; INITIALIZE THIEFY OR SET SEQUENCE#
 LDA #$56 ;-SET THIEFY TO BE ON THE FIRST
 STA THIEFY ; RUNG
 LDA #$00 ;-SET SEQUENCE NUMBER
 STA SEQUENCE# ; TO FIRST CHARACTER 
 JMP CLIMBOUT ;-SKIP TO OUTPUT SECTION
OLDCLIMBUP LDA THIEFY ;-DECREASE THIEFY
 SEC  ; TO THE NEXT
 SBC #$05 ; HIGHER RUNG
 STA THIEFY ; OF THE LADDER
 LDX #$00 ;-SET TO SCROLL
 STX SCROLLDIRECTION ; DOWN IF NESSISARY
 CMP #$10 (WHEN HE IS AT THE 
 BEQ SCROLLTARG ; TOP OF THE LADDER)
CLIMBOUT JSR ERASETHIEF ;-ERASE CHARACTER ALREADY ON THE SCREEN
 LDA THIEFX ;-TRANSFER PARAMETERS
 STA XLOC ; TO CHARACTER
 STA LASTTHIEFX ; GENERATOR AND 
 LDA THIEFY ; STORE THEM FOR 
 STA YLOC ; THE ERASE THIEF
 STA LASTTHIEFY ; ROUTINE
 LDA THIEFX ;-FORM A NEW
 AND #$01 ; CHARACTER NUMBER
 ASL A ; WITHE APPROPRIATE
 CLC  ; EVEN/ODD AND
 ADC SEQUENCE# ; SEQUENCE
 CLC
 ADC #$2B
 STA SHAPE ;-STORE THIS FOR CHARACTER GENERATOR
 STA LASTTHIEFSHAPE ; AND FOR ERASE THIEF ROUTINE
 JSR CHARACTERGEN ;-PUT IT ON THE SCREEN
 INC SEQUENCE# ;-INCREASE SEQUENCE NUMBER
 LDA SEQUENCE# ; AND MASK IT 
 AND #$01 ; TO KEEP IT 
 STA SEQUENCE# ; AT 0 OR 1
DONECLIMB RTS  ;-RETURN TO CONTROL SECTION 
*
*
*********************************
* ROUTINE WHICH JUMPS THIEF AND
* CATCHES ONTO THE LADDER PIECES
* HANGING FROM THE CEILING, 
* JUMPLOC DETERMINES LEGALITY.  IT 
* THEN WAITS FOR THE JOYSTICK TO
* BE MOVED (OR ANOTHER KEY TO BE
* PRESSED IF IN KEYBOARD MODE) 
* BEFORE RETURNING TO CONTROL.
*********************************
*
*
JUMP LDA CTRLCODE ;-IS HE GOING LEFT
 AND #$01 ; OR RIGHT?
 BEQ LEFTJUMP
 LDA LEVEL# ;-IF RIGHT THEN
 ASL A ; CHECK THIEFX AGAINST
 ASL A
 TAY  ; JUMPLOCRIGHT
 LDA THIEFX ; TO DETERMINE
 CMP JUMPLOCRIGHT,Y ; IF A JUMP
 BEQ LEGALJUMPRIGHT ; IS LEGAL
 CMP JUMPLOCRIGHT+1,Y
 BEQ LEGALJUMPRIGHT
 CMP JUMPLOCRIGHT+2,Y
 BEQ LEGALJUMPRIGHT
 CMP JUMPLOCRIGHT+3,Y
 BEQ LEGALJUMPRIGHT
 RTS  ;-RETURN IF JUMP NOT LEGAL
LEFTJUMP LDA LEVEL# ;-CHECK THIEFX
 ASL A ; AGAINST
 ASL A
 TAY  ; JUMPLOCLEFT
 LDA THIEFX ; TO DETERMINE
 CMP JUMPLOCLEFT,Y ; IF A JUMP
 BEQ LEGALJUMPLEFT ; IS LEGAL
 CMP JUMPLOCLEFT+1,Y
 BEQ LEGALJUMPLEFT
 CMP JUMPLOCLEFT+2,Y
 BEQ LEGALJUMPLEFT
 CMP JUMPLOCLEFT+3,Y
 BEQ LEGALJUMPLEFT
 RTS  ;-RETURN IF JUMP NOT LEGAL
LEGALJUMPLEFT SEC ;-ADJUST THIEFX FOR
 SBC #$03 ; JUMP CHARACTERS
 STA THIEFX
 LDA THIEFY ;-ADJUST THIEFY TO
 SEC  ; THE CORRECT POSITION
 SBC #$10 ; FOR THE JUMP
 STA THIEFY ; CHARACTERS
 LDA THIEFX ;-SET UP JUMP
 AND #$01 ; CHARACTER SHAPE
 ASL A ; WITH APPROPRIATE
 ASL A ; ODD/EVEN
 ADC #$1B ; CHARACTERS
 STA THIEFSHAPE
 LDA #$03 ;-SET LOOP
 STA SEQUENCE# ; VARIABLE
 JMP JUMPLOOP ;-BRANCH TO LOOP WHICH DOES THE JUMP
LEGALJUMPRIGHT LDA THIEFY ;-ADJUST THIEFY TO
 SEC  ; THE CORRECT POSITION
 SBC #$10 ; FOR THE JUMP
 STA THIEFY ; CHARACTERS
 LDA THIEFX ;-SET UP JUMP
 AND #$01 CHARACTER SHAPE
 ASL A ; WITH APPROPRIATE
 ASL A ; ODD/EVEN
 ADC #$23 ; CHARACTERS
 STA THIEFSHAPE
 LDA #$03 ;-SET UP LOOP
 STA SEQUENCE# ; VARIABLE
JUMPLOOP JSR ERASETHIEF
 LDA THIEFX ;-TRANSFER
 STA XLOC ; PARAMETERS
 STA LASTTHIEFX ; TO CHARACTER
 LDA THIEFY ; GENERATOR
 STA YLOC ; AND STORE 
 STA LASTTHIEFY ; FOR THE
 LDA THIEFSHAPE ; ERASE THIEF
 STA SHAPE ; ROUTINE
 STA LASTTHIEFSHAPE
 JSR CHARACTERGEN ;-PUT IT ON THE SCREEN
 JSR ANIMATE ;-DO ALL OTHER ANIMATION
 INC THIEFSHAPE ;-ADVANCE TO NEXT CHARACTER
 DEC SEQUENCE# ;-DECREACE LOOP VARIABLE 
 BNE JUMPLOOP ;-IF LOOP IS FINISHED, FALL THROUGH
*
* SECTION CHECKS KEYBOARD OR JOYSTICK TO
* DETERMINE WHEN HE WANTS TO JUMP DOWN
*
 LDA $3C0 ;-IS IT KEYBOARD OR JOYSTICK?
 BEQ KEYLOOP
BUTTONLOOP JSR ANIMATE ;-ALLOW HAZARDS TO BE ANIMATED
 LDA $C061 ;-MAKE SURE THAT BUTTON HAS BEEN RELEASED
 BMI BUTTONLOOP ;-IF IT IS DOWN WAIT UNTIL RELEASED
JOYLOOP LDA $C061 ;-HAS THE BUTTON BEEN PRESSED AGAIN 
 BMI FINISHJUMP ;-IF SO THEN JUMP BACK DOWN
 JSR ANIMATE ;-ALLOW HAZARD ANIMATION TO CONTINUE
 JMP JOYLOOP ;-CONTINUE LOOPING
KEYLOOP LDA $C000 ;-HAS A KEY BEEN PRESSED AGAIN?
 BMI FINISHJUMP ;-IF SO THEN JUMP BACK DOWN
 JSR ANIMATE ;-ALLOW HAZARDS TO BE ANIMATED
 JMP KEYLOOP ;-CONTINUE LOOP
*
* ROUTINE TO JUMP BACK DOWN
*
FINISHJUMP JSR ERASETHIEF ;-ERASE LAST CHARACTER
 LDA THIEFX ;-TRANSFER X AND Y
 STA XLOC ; LOCATIONS TO THE
 STA LASTTHIEFX ; CHARACTER GENERATOR
 LDA THIEFY ; AND ERASE THIEF
 STA YLOC ; ROUTINE
 STA LASTTHIEFY
 DEC THIEFSHAPE ;-SET NEW SHAPE
 DEC THIEFSHAPE ; CHARACTER AND
 LDA THIEFSHAPE ; TRANSFER AS WELL
 STA SHAPE
 STA LASTTHIEFSHAPE
 JSR CHARACTERGEN ;-PUT IT ON THE SCREEN
 JSR ANIMATE ;-DO HAZARD ANIMATION
 LDA CTRLCODE ;-IF HE IS GOING
 AND #$01 ; LEFT THEN READJUST
 BNE NOJUMPADJUST ; THE X LOCATION
 INC THIEFX
 INC THIEFX
NOJUMPADJUST JSR ERASETHIEF ;-ERASE CHARACTER
 LDA #$50 ;-SET APPROPRIATE Y
 STA YLOC ; LOCATION AND CHARACTER
 STA LASTTHIEFY ; NUMBER AND
 LDA THIEFX ; TRANSFER TO
 STA XLOC ; THE CHARACTER
 STA LASTTHIEFX ; GENERATOR AND
 INC THIEFSHAPE ; THE THIEF ERASE
 INC THIEFSHAPE ; ROUTINE
 LDA THIEFSHAPE
 STA SHAPE
 STA LASTTHIEFSHAPE
 JSR CHARACTERGEN ;-PUT IT ON THE SCREEN
 LDA #$56 ;-RESTOREX+Y LOCATIONS 
 STA THIEFY
 LDA CTRLCODE ;-IF HE IS GOING RIGHT
 AND #$01 ; THEN DONT ADJUST
 BNE NOJUMPADJUST2 ; HIS X LOCATION
 INC THIEFX
NOJUMPADJUST2 RTS  ;-RETURN TO CONTROL ROUTINE
*
*
****************************** 
*ROUTINE TO SCROLL
*SCREENS ONTO THE DISPLAY IT
*CAN EITHER SCROLL UP OR IT 
*CAN SCROLL DOWN.  
* THE SCREEN BLOADED IN
*IS STORED IN BUFFER $4000 AND
*IS 2560 BYTES LONG OR 64 LINES
*OF HIRES FROM THERE THE SCREEN 
*IS SCROLLED UP OR DOWN.
***************************** 
*
*
SCROLL JSR CHARACTERBLOAD ;BLOAD IN APPROPRIATE CSET 
 LDA #$56 ;SET THEIFY BACK TO
 STA THIEFY ;THE MIDDLE LEVEL
 LDA SCROLLDIRECTION ;LOAD AND TEST TO 
 BEQ UP ;SEE IF ZERO TO GO UP IF NOT FALL THRU 
*
*
 JMP DOWN
*
*
UP DEC LEVEL# ;SET NEW NUMBER FOR LEVEL THAT THE MAN IS ON
 LDA YBOUND ;MOVE CHARACTER GEN
 CLC ;CUT-OFF AREAS DOWN AS WELL
 ADC #$40
 STA YBOUND
 LDA YBOUND2
 CLC
 ADC #$40
 STA YBOUND2
 LDA YBOUND3
 CLC
 ADC #$40
 STA YBOUND3
 LDA YBOUND4
 CLC
 ADC #$40
 STA YBOUND4
 LDA #$00 ;MAKE SURE GASMASK
 STA MASKON ;IS OFF
 LDA LEVEL# ;IF HE IS ON LEVEL
 CMP #$02 ;TWO THEN SET
 BNE NOTLEVELTWO ;LEFTBOUND TO
 LDA #$05 ;ADJUST FOR THE
 STA LEFTBOUND ;WATER SECTION
 LDA #$1B ;ALSO SET RIGHTBOUND 
 STA RIGHTBOUND
 JMP CONTUP 
NOTLEVELTWO LDA #$00 ;IF NOT LEVEL2 THEN SET
 STA LEFTBOUND ;LEFTBOUND TO ZERO
 LDA #$20 ;AND RESET RIGHTBOUND 
 STA RIGHTBOUND
CONTUP DEC BSTRING+$0A ;DECREASE BLOAD LEVEL NUMBER 
 DEC BSTRING+$0A ;TO POINT TO SCREEN TO BE LOADED 
 JSR BLOAD ;GOTO BLOAD ROUTINE AND BLOAD IT
 JSR SCROLLUP ;GO AND SCROLL IT UP 
 LDA BSTRING+$0A ;FIND WHAT SCREEN 
 SEC ;IS BEING SCROLLED  
 SBC #$B0 ;SO THAT THE APPROPRIATE  
 STA COUNTER ;MULTIPLY THE SCREEN  
 CLC ;NUMBER BY SIX AS THERE 
 ADC COUNTER ;ARE SIX BYTES TO A SCREEN 
 ADC COUNTER
 STA COUNTER
 ADC COUNTER
 TAX
 LDA PRINTTREASURE,X ;SKIP THE NEXT 
 CMP #$80 ;SECTION OF CODE IF THE 
 BEQ NOPRINTTREASURE ;TREASURE HAS BEEN PICKED UP 
 STA XLOC ;SET UP VARIABLES FOR CHARACTER 
 INX ;GENERATOR IN ORDER TO PLACE THE FIRST 
 LDA PRINTTREASURE,X ;TREASURE ON THE SCREEN 
 SEC
 SBC #$40
 STA YLOC
 INX
 LDA PRINTTREASURE,X
 STA SHAPE
 STX COUNTER ;SAVE X REGISTER 
 JSR CHARACTERGEN ;PUT IT ON THE SCREEN
 LDX COUNTER ;RESTORE X REGISTER 
 JMP CONTPRINT ;SKIP INCREASES 
NOPRINTTREASURE INX ;ADVANCE TO SECOND TREASURE 
 INX
CONTPRINT INX
 LDA PRINTTREASURE,X ;IF THIS ONE HAS 
 CMP #$80 ;BEEN PICKED UP ALREADY
 BEQ NOPRINTTREASURE1 ;THEN DONT PUT IT ON THE SCREEN 
 STA XLOC ;SET UP SECOND 
 INX ;TREASURE VALUES 
 LDA PRINTTREASURE,X
 SEC
 SBC #$40
 STA YLOC
 INX
 LDA PRINTTREASURE,X
 STA SHAPE
 JSR CHARACTERGEN ;PUT IT ON THE SCREEN 
NOPRINTTREASURE1 INC BSTRING+$0A ;SET SCREEN # TO CENTER ONE 
 LDA #$55  
 STA LASTTHIEFY ;RESET ERASE LOCATION 
*
*
LOADANIMATE JSR BLOADANIMATE ;CALL ROUTINE TO LOAD IN FILE
 RTS ;GO HOME
*
*
DOWN INC LEVEL# ;SET NEW NUMBER FOR LEVEL THAT MAN IS ON
 LDA YBOUND ;MOVE CHARACTER GEN
 SEC ;CUT-OFF AREAS UP AS WELL
 SBC #$40
 STA YBOUND
 LDA YBOUND2
 SEC
 SBC #$40
 STA YBOUND2
 LDA YBOUND3
 SEC
 SBC #$40
 STA YBOUND3
 LDA YBOUND4
 SEC
 SBC #$40
 STA YBOUND4
 LDA #$00 ;MAKE SURE GAS MASK
 STA MASKON ;IS OFF
 LDA LEVEL# ;IF HE IS ON LEVEL
 CMP #$02 ;TWO THEN SET
 BNE NOTLEVEL2 ;LEFTBOUND TO
 LDA #$05 ;ADJUST FOR THE
 STA LEFTBOUND ;WATER SECTION
 LDA #$1B ;ALSO SET RIGHTBOUND 
 STA RIGHTBOUND
 JMP CONTDOWN
NOTLEVEL2 LDA #$00 ;IF NOT LEVEL2 THEN SET
 STA LEFTBOUND ;LEFTBOUND TO ZERO
 LDA #$20 ;AND RESET RIGHTBOUND 
 STA RIGHTBOUND
CONTDOWN INC BSTRING+$0A ;INCREASE BLOAD LEVEL NUMBER 
 INC BSTRING+$0A ;TO POINT TO SCREEN TO BE LOADED 
 JSR BLOAD ;GOTO BLOAD ROUTINE AND BLOAD IT
 JSR SCROLLDOWN ;GO AND SCROLL IT DOWN 
 LDA BSTRING+$0A ;FIND WHAT SCREEN IS BEING SCROLLED 
 SEC ;SO THAT THE APPROPRIATE 
 SBC #$B0 ;TREASURE CAN BE PRINTED  
 STA COUNTER ;MULTIPLY THE SCREEN  
 CLC ;NUMBER BY SIX AS THERE 
 ADC COUNTER ;ARE SIX BYTES TO A SCREEN 
 ADC COUNTER
 STA COUNTER
 ADC COUNTER
 TAX
 LDA PRINTTREASURE,X ;DONT PUT IT ON IF THE 
 CMP #$80 ;TREASURE HAS BEEN
 BEQ NOPRINTTREASURE2 ;BEEN PICKED UP ALREADY 
 STA XLOC ;SET UP VARIABLES FOR CHARACTER GENERATOR 
 INX ;IN ORDER TO PLACE THE FIRST TREASURE 
 LDA PRINTTREASURE,X ;ON THE SCREEN 
 CLC 
 ADC #$40
 STA YLOC
 INX
 LDA PRINTTREASURE,X
 STA SHAPE
 STX COUNTER ;SAVE X REGISTER 
 JSR CHARACTERGEN ;PUT IT ON THE SCREEN
 LDX COUNTER ;RESTORE X REGISTER 
 JMP CONTPRINT2 ;SKIP INCREASES 
NOPRINTTREASURE2 INX ;ADVANCE TO SECOND TREASURE 
 INX
CONTPRINT2 INX
 LDA PRINTTREASURE,X ;IF THIS ONE HAS BEEN 
 CMP #$80 ;PICKED UP THEN DONT
 BEQ NOPRINTTREASURE3 ;PUT IT ON THE SCREEN 
 STA XLOC ;SET UP SECOND 
 INX ;TREASURE VALUES 
 LDA PRINTTREASURE,X
 CLC 
 ADC #$40
 STA YLOC
 INX
 LDA PRINTTREASURE,X
 STA SHAPE
 JSR CHARACTERGEN ;PUT IT ON THE SCREEN 
NOPRINTTREASURE3 DEC BSTRING+$0A ;SET SCREEN NUMBER TO THE CENTER ONE
 LDA #$57 
 STA LASTTHIEFY ;RESET ERASE LOCATION 
 JMP LOADANIMATE 
*
*
* BLOAD ROUTINE BLOADS SCRN+
* THE CURRENT VALUE OF LEVEL#
*
*
BLOAD LDX #$00 ;INITIALIZE X REG.
BLOOP LDA BSTRING,X ;GET A CHARACTER 
 JSR DOS ;SEND SINGLE CHARACTER TO DOS 
 INX ;INCREMENT X REG. 
 CPX #$0C ;SEE IF DONE ALL CHARCATERS 
 BNE BLOOP ;IF NOT FINISHED DO IT AGAIN
 RTS ;RETURN TO CONTROL ROUTINE
*
*
* ROUTINE TO SCROLL SCREEN DOWN
* OR MAN UP 'SCROLLUP'
*
*
SCROLLUP LDA #$49 
 STA BUFFERHI ;HI ADDR. OF BUFFER
 LDA #$FF 
 STA BUFFERLO ;LO ADDR. OF BUFFER
SCREENUP LDA #$BB ;INITIALIZE LINE NUMBER 
 STA LINE# ;TO BOTTOM OF SCREEN 
 TAY   ;TRANSFER TO Y REG. TO INDEX WITH
 LDA LOOKUPHI,Y ;GET HI BYTE ADDR. OF LINE
 STA SCREENHI
 LDA LOOKUPLO,Y ;GET LO BYTE ADDR. OF LINE
 STA SCREENLO
 TYA  ;ADVANCE POINTER
 CLC  ;TO NEXT LINE
 ADC #$04
 TAY
 LDA LOOKUPLO,Y ;POINTER TO DESTINATION LINE LO 
 STA LOADDR
 LDA LOOKUPHI,Y ;POINTERTO DESTINATION HI 
 STA HIADDR
*
*
SCREENLOOP LDY #$00 ;SET INDEX TO BEGINNING OF LINE
*
LINELOOP LDA (SCREENLO),Y ;GET BYTE OFF SCREEN
 STA (LOADDR),Y ;STORE IT ONE LINE LOWER
 INY  ;POINT TO NEXT BYTE ON LINE
 CPY #$28 ;IS THE LINE FINISHED? 
 BNE LINELOOP ;IF NOT CONTINUE LOOP
*
*
 DEC LINE# ;MOVE POINTER TO NEXT LINE UP
 LDY LINE# ;LOAD INDEX INTO REGISTER
 LDA LOOKUPHI,Y ;GET HI BYTE ADDR. OF LINE
 STA SCREENHI
 LDA LOOKUPLO,Y ;GET LO BYTE ADDR. OF LINE
 STA SCREENLO
 TYA  ;ADVANCE POINTER
 CLC  ;TO NEXT LINE
 ADC #$04
 TAY
 LDA LOOKUPLO,Y ;POINTER TO DESTINATION LINE LO 
 STA LOADDR
 LDA LOOKUPHI,Y ;POINTERTO DESTINATION HI 
 STA HIADDR
 CPY #$04 ;HAS THE WHOLE SCREEN BEEN SCROLLED ONE LINE UP?
 BNE SCREENLOOP ;IF NOT,CONTINUE LOOPING
*
*
 LDY #$00
LINELOOP2 LDA (SCREENLO),Y ;GET BYTE OFF SCREEN
 STA (LOADDR),Y ;STORE IT ONE LINE LOWER
 INY  ;POINT TO NEXT BYTE ON LINE
 CPY #$28 ;IS THE LINE FINISHED? 
 BNE LINELOOP2 ;IF NOT CONTINUE LOOP
*
*
 LDA #$04 ;SET NUMBER OF LINES
 STA LOOP# ;TO BE LOOPED
 LDY #$03 ;SET INDEX
 STY LINE# ;SET VARIABLE TO KEEP TRACK OF WHICH LINE ITS ON
 LDA LOOKUPLO,Y ;SET SCREEN POINTERS
 STA SCREENLO ;TO FIRST LINE TO BE DONE 
 LDA LOOKUPHI,Y
 STA SCREENHI
 LDY #$27 ;SET INDEX TO LAST BYTE IN LINE
 LDX #$00 ;WE DONT NEED AN INDEX
BUFFERLOOP LDA (BUFFERLO,X) ;GET BYTE FROM BUFFER
 STA (SCREENLO),Y ;PLACE IT ON THE SCREEN
 LDA BUFFERLO ;MOVE POINTER TO NEXT BYTE
 SEC
 SBC #$01
 STA BUFFERLO
 BCS NOBORROW ;IF BUFFERLO DIDNT WRAP AROUND TO 0 THEN SKIP DECREMENT
 DEC BUFFERHI
NOBORROW LDA BUFFERHI ;HAVE ALL 64 LINES
 CMP #$3F ;BEEN SCROLLED YET?
 BEQ DONESCROLL ;IF SO THEN FINISHED
 DEY  ;SET INDEX TO NEXT BYTE ON SCREEN
 CPY #$FF ;HAVE ALL 40 BYTES BEEN DONE? 
 BNE BUFFERLOOP ;IF NOT CONTINUE LOOP 
 DEC LINE# ;ADVANCE TO NEXT LINE
 LDY LINE# ;SET INDEX
 LDA LOOKUPLO,Y ;SET SCREEN POINTERS
 STA SCREENLO ;FOR NEXT LINE 
 LDA LOOKUPHI,Y
 STA SCREENHI
 LDY #$27 ;ZERO INDEXES
 LDX #$00
 DEC LOOP# ;SEE IF FOUR LINES HAVE
 BNE BUFFERLOOP ;BEEN PUT ON THE SCREEN
 JMP SCREENUP
DONESCROLL RTS
*
*
*ROUTINE TO SCROLL MAN DOWN 
*OR SCREEN UP 
*
SCROLLDOWN LDA #$40 
 STA BUFFERHI ;HI ADDR. OF BUFFER
 LDA #$00 
 STA BUFFERLO ;LO ADDR. OF BUFFER
SCREENDOWN LDA #$04 ;INITIALIZE LINE NUMBER 
 STA LINE# ;TO TOP OF SCREEN 
 TAY   ;TRANSFER TO Y REG. TO INDEX WITH
 LDA LOOKUPHI,Y ;GET HI BYTE ADDR. OF LINE
 STA SCREENHI
 LDA LOOKUPLO,Y ;GET LO BYTE ADDR. OF LINE
 STA SCREENLO
 TYA  ;ADVANCE TO 
 SEC  ;POINT AT 
 SBC #$04 ;THE NEXT 
 TAY  ;LINE 
 LDA LOOKUPLO,Y ;POINTER TO DESTINATION LINE LO 
 STA LOADDR
 LDA LOOKUPHI,Y ;POINTERTO DESTINATION HI 
 STA HIADDR
*
*
LOOPSCREEN LDY #$00 ;SET INDEX TO BEGINNING OF LINE
*
LOOPLINE LDA (SCREENLO),Y ;GET BYTE OFF SCREEN
 STA (LOADDR),Y ;STORE IT ONE LINE HIGHER 
 INY  ;POINT TO NEXT BYTE ON LINE
 CPY #$28 ;IS THE LINE FINISHED? 
 BNE LOOPLINE ;IF NOT CONTINUE LOOP
*
*
 INC LINE# ;MOVE POINTER TO NEXT LINE DOWN 
 LDY LINE# ;LOAD INDEX INTO REGISTER
 LDA LOOKUPHI,Y ;GET HI BYTE ADDR. OF LINE
 STA SCREENHI
 LDA LOOKUPLO,Y ;GET LO BYTE ADDR. OF LINE
 STA SCREENLO
 TYA  ;ADVANCE TO 
 SEC  ;POINT AT 
 SBC #$04 ;THE NEXT 
 TAY  ;LINE 
 LDA LOOKUPLO,Y ;POINTER TO DESTINATION LINE LO 
 STA LOADDR
 LDA LOOKUPHI,Y ;POINTERTO DESTINATION HI 
 STA HIADDR
 CPY #$BB ;HAS THE WHOLE SCREEN BEEN SCROLLED ONE LINE UP?
 BNE LOOPSCREEN ;IF NOT,CONTINUE LOOPING
*
*
 LDY #$00
LOOPLINE2 LDA (SCREENLO),Y ;GET BYTE OFF SCREEN
 STA (LOADDR),Y ;STORE IT ONE LINE HIGHER 
 INY  ;POINT TO NEXT BYTE ON LINE
 CPY #$28 ;IS THE LINE FINISHED? 
 BNE LOOPLINE2 ;IF NOT CONTINUE LOOP
*
*
 LDA #$04 ;SET NUMBER OF LINES
 STA LOOP# ;TO BE LOOPED
 LDY #$BC ;SET INDEX
 STY LINE# ;SET VARIABLE TO KEEP TRACK OF WHICH LINE ITS ON
 LDA LOOKUPLO,Y ;SET SCREEN POINTERS
 STA SCREENLO ;TO FIRST LINE TO BE DONE 
 LDA LOOKUPHI,Y
 STA SCREENHI
 LDY #$00 ;SET INDEX TO FIRST BYTE IN LINE 
 LDX #$00 ;WE DONT NEED AN INDEX
BUFFERLOOP1 LDA (BUFFERLO,X) ;GET BYTE FROM BUFFER
 STA (SCREENLO),Y ;PLACE IT ON THE SCREEN
 INC BUFFERLO ;MOVE POINTER TO NEXT BYTE
 BNE NOCARRY ;IF BUFFERLO DIDNT WRAP AROUND TO 0 THEN SKIP DECREMENT
 INC BUFFERHI
NOCARRY LDA BUFFERHI ;HAVE ALL 64 LINES
 CMP #$4A ;BEEN SCROLLED YET?
 BEQ SCROLLDONE ;IF SO THEN FINISHED
 INY  ;SET INDEX TO NEXT BYTE ON SCREEN
 CPY #$28 ;HAVE ALL 40 BYTES BEEN DONE? 
 BNE BUFFERLOOP1 ;IF NOT CONTINUE LOOP 
 INC LINE# ;ADVANCE TO NEXT LINE
 LDY LINE# ;SET INDEX
 LDA LOOKUPLO,Y ;SET SCREEN POINTERS
 STA SCREENLO ;FOR NEXT LINE 
 LDA LOOKUPHI,Y
 STA SCREENHI
 LDY #$00 ;ZERO INDEXES
 LDX #$00
 DEC LOOP# ;SEE IF FOUR LINES HAVE
 BNE BUFFERLOOP1 ;BEEN PUT ON THE SCREEN
 JMP SCREENDOWN 
SCROLLDONE RTS
*
*
 CHN HEIST-Ib
----------------------------------

Textfile HEIST-Ia
